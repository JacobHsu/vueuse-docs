import{_ as n}from"./DemoContainer.vue_vue&type=script&setup=true&lang.538fc852.js";import{o as s,c as a,a as t,f as e,r as o,Q as p,a1 as c,I as r,w as l,l as u,v as i,u as k,t as h,b as d,d as f,e as g}from"./app.5f9bb12a.js";import{_ as m}from"./Note.4d65cb61.js";import{_ as y}from"./checkmark.86d45fcb.js";import{s as b}from"./utils.8fd68d5f.js";const w={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",width:"1.2em",height:"1.2em",preserveAspectRatio:"xMidYMid meet",viewBox:"0 0 32 32"},F=t("path",{d:"M2 16A14 14 0 1 0 16 2A14 14 0 0 0 2 16zm23.15 7.75L8.25 6.85a12 12 0 0 1 16.9 16.9zM8.24 25.16a12 12 0 0 1-1.4-16.89l16.89 16.89a12 12 0 0 1-15.49 0z",fill:"currentColor"},null,-1);var v={name:"carbon-error",render:function(n,t){return s(),a("svg",w,[F])}};const T=f("The following URLs can be used to test different features of useFetch"),R=t("div",{class:"mt-2"},[f(" Normal Request: "),t("code",null," https://httpbin.org/get ")],-1),q=t("div",null,[f(" Abort Request: "),t("code",null," https://httpbin.org/delay/10 ")],-1),x=t("div",null,[f(" Response Error: "),t("code",null," http://httpbin.org/status/500 ")],-1),U={class:"ml-2"},_={lang:"yaml"};var A=e({setup(n){const e=o("https://httpbin.org/get"),f=o(!1),g=p(f),{data:w,error:F,abort:A,statusCode:C,isFetching:O,isFinished:S,canAbort:P,execute:B}=c(e,{refetch:f}).get(),E=b(r({isFinished:S,isFetching:O,canAbort:P,statusCode:C,error:F,data:w}));return(n,o)=>{const p=m,c=y,r=v;return s(),a("div",null,[t("div",null,[t(p,null,{default:l((()=>[T])),_:1}),R,q,x]),u(t("input",{"onUpdate:modelValue":o[1]||(o[1]=n=>e.value=n),type:"text"},null,512),[[i,e.value]]),t("button",{onClick:o[2]||(o[2]=(...n)=>k(B)&&k(B)(...n))}," Execute "),t("button",{onClick:o[3]||(o[3]=(...n)=>k(g)&&k(g)(...n))},[f.value?(s(),a(c,{key:0})):(s(),a(r,{key:1})),t("span",U,h(f.value?"Refetch On":"Refetch Off"),1)]),k(P)?(s(),a("button",{key:0,class:"orange",onClick:o[4]||(o[4]=(...n)=>k(A)&&k(A)(...n))}," Abort ")):d("v-if",!0),t("pre",_,h(k(E)),1)])}}});const C=g('<h1 id="usefetch"><a class="header-anchor" href="#usefetch" aria-hidden="true">#</a> useFetch</h1><p>Reactive <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noopener noreferrer">Fetch API</a> provides the ability to abort requests, intercept requests before they are fired, automatically refetch requests when the url changes, and create your own <a href="/core/useFetch/"><code>useFetch</code></a>with predefined options.</p><p><div class="table-of-contents"><ul><li><a href="#usage">Usage</a><ul><li><a href="#basic-usage">Basic Usage</a></li><li><a href="#refetching-on-url-change">Refetching on URL change</a></li><li><a href="#prevent-request-from-firing-immediately">Prevent request from firing immediately</a></li><li><a href="#aborting-a-request">Aborting a request</a></li><li><a href="#intercepting-a-request">Intercepting a request</a></li><li><a href="#setting-the-request-method-and-return-type">Setting the request method and return type</a></li><li><a href="#creating-a-custom-instance">Creating a custom instance</a></li><li><a href="#events">Events</a></li></ul></li><li><a href="#type-declarations">Type Declarations</a></li><li><a href="#source">Source</a></li></ul></div></p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><h3 id="basic-usage"><a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a> Basic Usage</h3><p>The <a href="/core/useFetch/"><code>useFetch</code></a>function can be used by simply providing a url. The url can be either a string or a <code>ref</code>. The <code>data</code> object will contain the result of the request, the <code>error</code> object will contain any errors, and the <code>isFetching</code> object will indicate if the request is loading.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useFetch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> isFetching<span class="token punctuation">,</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n</code></pre></div><h3 id="refetching-on-url-change"><a class="header-anchor" href="#refetching-on-url-change" aria-hidden="true">#</a> Refetching on URL change</h3><p>Using a <code>ref</code> for the url parameter will allow the <a href="/core/useFetch/"><code>useFetch</code></a>function to automatically trigger another request when the url is changed.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;https://my-api.com/user/1&#39;</span><span class="token punctuation">)</span> \n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> refetch<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nurl<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;https://my-api.com/user/2&#39;</span> <span class="token comment">// Will trigger another request</span>\n</code></pre></div><h3 id="prevent-request-from-firing-immediately"><a class="header-anchor" href="#prevent-request-from-firing-immediately" aria-hidden="true">#</a> Prevent request from firing immediately</h3><p>Setting the <code>immediate</code> option to false will prevent the request from firing until the <code>execute</code> function is called.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> execute <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> immediate<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="aborting-a-request"><a class="header-anchor" href="#aborting-a-request" aria-hidden="true">#</a> Aborting a request</h3><p>A request can be aborted by using the <code>abort</code> function from the <a href="/core/useFetch/"><code>useFetch</code></a>function. The <code>canAbort</code> property indicates if the request can be aborted</p><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> abort<span class="token punctuation">,</span> canAbort <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>canAbort<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n    <span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="intercepting-a-request"><a class="header-anchor" href="#intercepting-a-request" aria-hidden="true">#</a> Intercepting a request</h3><p>The <code>beforeFetch</code> option can intercept a request before it is sent and modify the request options and url.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token keyword">async</span> <span class="token function">beforeFetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token punctuation">,</span> options<span class="token punctuation">,</span> cancel <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> myToken <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getMyToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>myToken<span class="token punctuation">)</span>\n      <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    options<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>myToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      options\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>The <code>afterFetch</code> option can intercept the response data before it is updated.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">afterFetch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>data<span class="token punctuation">.</span>title <span class="token operator">===</span> <span class="token string">&#39;HxH&#39;</span><span class="token punctuation">)</span>\n      ctx<span class="token punctuation">.</span>data<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;Hunter x Hunter&#39;</span> <span class="token comment">// Modifies the resposne data</span>\n\n    <span class="token keyword">return</span> ctx\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="setting-the-request-method-and-return-type"><a class="header-anchor" href="#setting-the-request-method-and-return-type" aria-hidden="true">#</a> Setting the request method and return type</h3><p>The request method and return type can be set by adding the appropriate methods to the end of <code>useFetch</code></p><div class="language-ts"><pre><code><span class="token comment">// Request will be sent with GET method and data will be parsed as JSON</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Request will be sent with POST method and data will be parsed as text</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Or set the method using the options</span>\n\n<span class="token comment">// Request will be sent with GET method and data will be parsed as blob</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span> method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> refetch<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="creating-a-custom-instance"><a class="header-anchor" href="#creating-a-custom-instance" aria-hidden="true">#</a> Creating a custom instance</h3><p>The <code>createFetch</code> function will return a useFetch function with whatever pre-configured options that are provided to it. This is useful for interacting with API&#39;s throughout an application that uses the same base URL or needs Authorization headers.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> useMyFetch <span class="token operator">=</span> <span class="token function">createFetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \n  baseUrl<span class="token operator">:</span> <span class="token string">&#39;https://my-api.com&#39;</span><span class="token punctuation">,</span> \n  options<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">async</span> <span class="token function">beforeFetch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> options <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> myToken <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getMyToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      options<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>myToken<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> options <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  fetchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    mode<span class="token operator">:</span> <span class="token string">&#39;cors&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> isFetching<span class="token punctuation">,</span> error<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMyFetch</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="events"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h3><p>The <code>onFetchResposne</code> and <code>onFetchError</code> will fire on fetch request responses and errors respectively.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> onFetchResponse<span class="token punctuation">,</span> onFetchError <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n\n<span class="token function">onFetchResponse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">onFetchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',30),O=g('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">interface</span> <span class="token class-name">UseFetchReturnBase<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Indicates if the fetch request has finished\n   */</span>\n  isFinished<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * The statusCode of the HTTP fetch response\n   */</span>\n  statusCode<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * The raw response of the fetch response\n   */</span>\n  response<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>Response <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Any fetch errors that may have occurred\n   */</span>\n  error<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * The fetch response body, may either be JSON or text\n   */</span>\n  data<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Indicates if the request is currently being fetched.\n   */</span>\n  isFetching<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Indicates if the fetch request is able to be aborted\n   */</span>\n  canAbort<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Indicates if the fetch request was aborted\n   */</span>\n  aborted<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Abort the fetch request\n   */</span>\n  abort<span class="token operator">:</span> Fn\n  <span class="token comment">/**\n   * Manually call the fetch\n   * (default not throwing error)\n   */</span>\n  <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token punctuation">(</span>throwOnFailed<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Fires after the fetch request has finished\n   */</span>\n  onFetchResponse<span class="token operator">:</span> EventHookOn<span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Fires after a fetch request error\n   */</span>\n  onFetchError<span class="token operator">:</span> EventHookOn\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">UseFetchReturnTypeConfigured<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">UseFetchReturnBase<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturnBase<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n  <span class="token function">post</span><span class="token punctuation">(</span>payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturnBase<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n  <span class="token function">put</span><span class="token punctuation">(</span>payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturnBase<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n  <span class="token keyword">delete</span><span class="token punctuation">(</span>payload<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturnBase<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UseFetchReturn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">UseFetchReturnTypeConfigured<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token generic-function"><span class="token function">json</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">JSON</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturnTypeConfigured<span class="token operator">&lt;</span><span class="token constant">JSON</span><span class="token operator">&gt;</span>\n  <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturnTypeConfigured<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n  <span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturnTypeConfigured<span class="token operator">&lt;</span>Blob<span class="token operator">&gt;</span>\n  <span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturnTypeConfigured<span class="token operator">&lt;</span>ArrayBuffer<span class="token operator">&gt;</span>\n  <span class="token function">formData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturnTypeConfigured<span class="token operator">&lt;</span>FormData<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">BeforeFetchContext</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * The computed url of the current request\n   */</span>\n  url<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token comment">/**\n   * The request options of the current request\n   */</span>\n  options<span class="token operator">:</span> RequestInit\n  <span class="token comment">/**\n   * Cancels the current request\n   */</span>\n  cancel<span class="token operator">:</span> Fn\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AfterFetchContext<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  response<span class="token operator">:</span> Response\n  data<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UseFetchOptions</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Fetch function\n   */</span>\n  fetch<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">typeof</span> window<span class="token punctuation">.</span>fetch\n  <span class="token comment">/**\n   * Will automatically run fetch when [`useFetch`](/core/useFetch/)is used\n   *\n   * @default true\n   */</span>\n  immediate<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token comment">/**\n   * Will automatically refetch when the URL is changed if the url is a ref\n   *\n   * @default false\n   */</span>\n  refetch<span class="token operator">?</span><span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Will run immediately before the fetch request is dispatched\n   */</span>\n  beforeFetch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>\n    ctx<span class="token operator">:</span> BeforeFetchContext\n  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>BeforeFetchContext<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span><span class="token operator">&gt;</span>\n    <span class="token operator">|</span> Partial<span class="token operator">&lt;</span>BeforeFetchContext<span class="token operator">&gt;</span>\n    <span class="token operator">|</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Will run immediately after the fetch request is returned.\n   * Runs after any 2xx response\n   */</span>\n  afterFetch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>\n    ctx<span class="token operator">:</span> AfterFetchContext\n  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>AfterFetchContext<span class="token operator">&gt;&gt;</span> <span class="token operator">|</span> Partial<span class="token operator">&lt;</span>AfterFetchContext<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CreateFetchOptions</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * The base URL that will be prefixed to all urls\n   */</span>\n  baseUrl<span class="token operator">?</span><span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Default Options for the useFetch function\n   */</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> UseFetchOptions\n  <span class="token comment">/**\n   * Options for the fetch request\n   */</span>\n  fetchOptions<span class="token operator">?</span><span class="token operator">:</span> RequestInit\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">createFetch</span><span class="token punctuation">(</span>\n  config<span class="token operator">?</span><span class="token operator">:</span> CreateFetchOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">typeof</span> useFetch\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFetch</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFetch</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  url<span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  useFetchOptions<span class="token operator">:</span> UseFetchOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFetch</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  url<span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> RequestInit<span class="token punctuation">,</span>\n  useFetchOptions<span class="token operator">?</span><span class="token operator">:</span> UseFetchOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> UseFetchReturn<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useFetch/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useFetch/demo.vue" target="_blank" rel="noopener noreferrer">Demo</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useFetch/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4),S='{"title":"useFetch","description":"","frontmatter":"category Browser","headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":3,"title":"Basic Usage","slug":"basic-usage"},{"level":3,"title":"Refetching on URL change","slug":"refetching-on-url-change"},{"level":3,"title":"Prevent request from firing immediately","slug":"prevent-request-from-firing-immediately"},{"level":3,"title":"Aborting a request","slug":"aborting-a-request"},{"level":3,"title":"Intercepting a request","slug":"intercepting-a-request"},{"level":3,"title":"Setting the request method and return type","slug":"setting-the-request-method-and-return-type"},{"level":3,"title":"Creating a custom instance","slug":"creating-a-custom-instance"},{"level":3,"title":"Events","slug":"events"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/useFetch/index.md","lastUpdated":1626320652926}',P={};const B=Object.assign(P,{setup:function(e){return(e,o)=>{const p=n;return s(),a("div",null,[t(p,null,{default:l((()=>[t(A)])),_:1}),C,d("FOOTER_STARTS"),O,d("FOOTER_ENDS")])}}});export default B;export{S as __pageData};
