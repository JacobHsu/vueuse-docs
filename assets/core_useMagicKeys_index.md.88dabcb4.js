import{_ as n}from"./DemoContainer.vue_vue&type=script&setup=true&lang.538fc852.js";import{f as s,o as a,c as t,i as e,a7 as p,D as o,a as c,u as l,w as u,F as i,E as r,t as k,d,b as g,e as y}from"./app.5f9bb12a.js";import{_ as f}from"./Note.4d65cb61.js";var v=s({props:{value:{type:Boolean,required:!0}},setup:n=>(s,p)=>(a(),t("div",{class:["font-mono px-4 py-2 rounded ",n.value?"opacity-100 text-primary bg-primary bg-opacity-15":"opacity-50 bg-gray-600 bg-opacity-10 dark:bg-gray-400 dark:bg-opacity-10"]},[e(s.$slots,"default")],2))});const h={class:"flex flex-col md:flex-row"},m=d(" Press the following keys to test out "),b={class:"flex gap-3 justify-center"},w=d(" V "),_=d(" u "),M=d(" e "),K=c("div",{class:"mx-1"},null,-1),A=d(" U "),S=d(" s "),x=d(" e "),T={class:"flex gap-3 justify-center mt-3"},C=d(" Shift "),E=d(" Vue "),R=d(" Use "),U={class:"text-center mt-4"},D=d("Keys Pressed"),I={class:"flex mt-2 justify-center space-x-1 min-h-1.5em"};var P=s({setup(n){const{shift:s,v:e,u:d,e:g,s:y,v_u_e:P,u_s_e:j,current:q}=p(),O=o((()=>Array.from(q)));return(n,p)=>{const o=f,q=f;return a(),t("div",h,[c("img",{src:"/vueuse-docs/vue.svg",class:["h-38 py-8 m-auto transform transistion duration-500",{"opacity-0":!l(P),"rotate-180":l(s)}]},null,2),c("div",null,[c(o,{class:"text-center mt-0 mb-5"},{default:u((()=>[m])),_:1}),c("div",b,[c(v,{value:l(e)},{default:u((()=>[w])),_:1},8,["value"]),c(v,{value:l(d)},{default:u((()=>[_])),_:1},8,["value"]),c(v,{value:l(g)},{default:u((()=>[M])),_:1},8,["value"]),K,c(v,{value:l(d)},{default:u((()=>[A])),_:1},8,["value"]),c(v,{value:l(y)},{default:u((()=>[S])),_:1},8,["value"]),c(v,{value:l(g)},{default:u((()=>[x])),_:1},8,["value"])]),c("div",T,[c(v,{value:l(s)},{default:u((()=>[C])),_:1},8,["value"]),c(v,{value:l(P)},{default:u((()=>[E])),_:1},8,["value"]),c(v,{value:l(j)},{default:u((()=>[R])),_:1},8,["value"])]),c("div",U,[c(q,null,{default:u((()=>[D])),_:1}),c("div",I,[(a(!0),t(i,null,r(l(O),(n=>(a(),t("code",{key:n,class:"font-mono"},k(n),1)))),128))])])]),c("img",{src:"/vueuse-docs/favicon.svg",class:["h-38 py-8 m-auto transform transistion duration-500",{"opacity-0":!l(j),"rotate-180":l(s)}]},null,2)])}}});const j=y('<h1 id="usemagickeys"><a class="header-anchor" href="#usemagickeys" aria-hidden="true">#</a> useMagicKeys</h1><p>Reactive keys pressed state, with magical keys combination support.</p><blockquote><p>This function uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener noreferrer">Proxy</a> which is NOT supported by IE 11 or below.</p></blockquote><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMagicKeys <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> shift<span class="token punctuation">,</span> space<span class="token punctuation">,</span> a <span class="token comment">/* keys you want to monitor */</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">watch</span><span class="token punctuation">(</span>space<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;space has been pressed&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>shift<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Shift + A have been pressed&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Check out <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values" target="_blank" rel="noopener noreferrer">all the possible keycodes</a>.</p><h3 id="combinations"><a class="header-anchor" href="#combinations" aria-hidden="true">#</a> Combinations</h3><p>You can magically use combinations (shortcuts/hotkeys) by connecting keys with <code>+</code> or <code>_</code>.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMagicKeys <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> shiftCtrlA <span class="token operator">=</span> keys<span class="token punctuation">[</span><span class="token string">&#39;Shift+Ctrl+A&#39;</span><span class="token punctuation">]</span>\n\n<span class="token function">watch</span><span class="token punctuation">(</span>shiftCtrlA<span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Shift + Ctrl + A have been pressed&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMagicKeys <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Ctrl_A_B<span class="token punctuation">,</span> space<span class="token punctuation">,</span> alt_s<span class="token punctuation">,</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">watch</span><span class="token punctuation">(</span>Ctrl_A_B<span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Control+A+B have been pressed&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>You can also use <a href="/shared/whenever/"><code>whenever</code></a>function to make it shorter</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMagicKeys<span class="token punctuation">,</span> whenever <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">whenever</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span>shift_space<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Shift+Space have been pressed&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="current-pressed-keys"><a class="header-anchor" href="#current-pressed-keys" aria-hidden="true">#</a> Current Pressed keys</h3><p>A special property <code>current</code> is provided to representing all the keys been pressed currently.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMagicKeys <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> current <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token comment">// Set { &#39;control&#39;, &#39;a&#39; }</span>\n\n<span class="token function">whenever</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> current<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>current<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A is pressed but not B&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre></div><h3 id="key-aliasing"><a class="header-anchor" href="#key-aliasing" aria-hidden="true">#</a> Key Aliasing</h3><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMagicKeys<span class="token punctuation">,</span> whenever <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> shift_cool <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  aliasMap<span class="token operator">:</span> <span class="token punctuation">{</span>\n    cool<span class="token operator">:</span> <span class="token string">&#39;space&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">whenever</span><span class="token punctuation">(</span>shift_cool<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Shift + Space have been pressed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>By default, we have some <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useMagicKeys/aliasMap.ts" target="_blank" rel="noopener noreferrer">preconfigured alias for common practices</a>.</p><h3 id="conditionally-disable"><a class="header-anchor" href="#conditionally-disable" aria-hidden="true">#</a> Conditionally Disable</h3><p>You might have some <code>&lt;input /&gt;</code> elements in your apps, and you don&#39;t want to trigger the magic keys handling when users focused on those inputs. There is an example of using <a href="/core/useActiveElement/"><code>useActiveElement</code></a>and <code>and</code> to do that.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMagicKeys<span class="token punctuation">,</span> useActiveElement<span class="token punctuation">,</span> whenever<span class="token punctuation">,</span> and <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> activeElement <span class="token operator">=</span> <span class="token function">useActiveElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> notUsingInput <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> \n  activeElement<span class="token punctuation">.</span>value<span class="token operator">?.</span>tagName <span class="token operator">!==</span> <span class="token string">&#39;INPUT&#39;</span>\n  <span class="token operator">&amp;&amp;</span> activeElement<span class="token punctuation">.</span>value<span class="token operator">?.</span>tagName <span class="token operator">!==</span> <span class="token string">&#39;TEXTAREA&#39;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> tab <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token function">whenever</span><span class="token punctuation">(</span><span class="token function">and</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> notUsingInput<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Tab has been pressed outside of inputs!&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="custom-event-handler"><a class="header-anchor" href="#custom-event-handler" aria-hidden="true">#</a> Custom Event Handler</h3><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMagicKeys<span class="token punctuation">,</span> whenever <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> ctrl_s <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  passive<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token function">onEventFired</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>ctrlKey <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">&#39;s&#39;</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;keydown&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">whenever</span><span class="token punctuation">(</span>ctrl_s<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Ctrl+S have been pressed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><blockquote><p>⚠️ This usage is NOT recommended, please use with caution.</p></blockquote><h3 id="reactive-mode"><a class="header-anchor" href="#reactive-mode" aria-hidden="true">#</a> Reactive Mode</h3><p>By default, the values of <code>useMagicKeys()</code> are <code>Ref&lt;boolean&gt;</code>. If you want to use the object in the template, you can set it to reactive mode.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> reactive<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keys.shift<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    You are holding the Shift key!\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',28),q=y('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UseMagicKeysOptions<span class="token operator">&lt;</span>Reactive <span class="token keyword">extends</span> Boolean<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Returns a reactive object instead of an object of refs\n   *\n   * @default false\n   */</span>\n  reactive<span class="token operator">?</span><span class="token operator">:</span> Reactive\n  <span class="token comment">/**\n   * Target for listening events\n   *\n   * @default window\n   */</span>\n  target<span class="token operator">?</span><span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span>EventTarget<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Alias map for keys, all the keys should be lowercase\n   * { target: keycode }\n   *\n   * @example { ctrl: &quot;control&quot; }\n   * @default &lt;predefined-map&gt;\n   */</span>\n  aliasMap<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Register passive listener\n   *\n   * @default true\n   */</span>\n  passive<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token comment">/**\n   * Custom event handler for keydown/keyup event.\n   * Useful when you want to apply custom logic.\n   *\n   * When using `e.preventDefault()`, you will need to pass `passive: false` to useMagicKeys().\n   */</span>\n  onEventFired<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> KeyboardEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">MagicKeysInternal</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * A Set of currently pressed keys,\n   * Stores raw keyCodes.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n   */</span>\n  current<span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">MagicKeys<span class="token operator">&lt;</span>Reactive <span class="token keyword">extends</span> Boolean<span class="token operator">&gt;</span></span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>\n  Omit<span class="token operator">&lt;</span>\n    Reactive <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span>\n      <span class="token operator">?</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n      <span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    <span class="token keyword">keyof</span> MagicKeysInternal\n  <span class="token operator">&gt;</span> <span class="token operator">&amp;</span>\n    MagicKeysInternal\n<span class="token operator">&gt;</span>\n<span class="token comment">/**\n * Reactive keys pressed state, with magical keys combination support.\n *\n * @see /useMagicKeys\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> UseMagicKeysOptions<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> MagicKeys<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useMagicKeys</span><span class="token punctuation">(</span>\n  options<span class="token operator">:</span> UseMagicKeysOptions<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> MagicKeys<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> DefaultMagicKeysAliasMap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./aliasMap&quot;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useMagicKeys/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useMagicKeys/demo.vue" target="_blank" rel="noopener noreferrer">Demo</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useMagicKeys/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4),O='{"title":"useMagicKeys","description":"","frontmatter":"category Sensors","headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":3,"title":"Combinations","slug":"combinations"},{"level":3,"title":"Current Pressed keys","slug":"current-pressed-keys"},{"level":3,"title":"Key Aliasing","slug":"key-aliasing"},{"level":3,"title":"Conditionally Disable","slug":"conditionally-disable"},{"level":3,"title":"Custom Event Handler","slug":"custom-event-handler"},{"level":3,"title":"Reactive Mode","slug":"reactive-mode"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/useMagicKeys/index.md","lastUpdated":1626320652926}',B={};const N=Object.assign(B,{setup:function(s){return(s,e)=>{const p=n;return a(),t("div",null,[c(p,null,{default:u((()=>[c(P)])),_:1}),j,g("FOOTER_STARTS"),q,g("FOOTER_ENDS")])}}});export default N;export{O as __pageData};
