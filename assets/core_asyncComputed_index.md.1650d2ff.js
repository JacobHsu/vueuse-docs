import{o as n,c as a,b as s,e as t}from"./app.5f9bb12a.js";const e='{"title":"asyncComputed","description":"","frontmatter":{},"headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":3,"title":"Evaluation State","slug":"evaluation-state"},{"level":3,"title":"onCancel","slug":"oncancel"},{"level":3,"title":"Lazy","slug":"lazy"},{"level":2,"title":"Caveats","slug":"caveats"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/asyncComputed/index.md","lastUpdated":1626320652922}',o={},p=t('<h1 id="asynccomputed"><a class="header-anchor" href="#asynccomputed" aria-hidden="true">#</a> asyncComputed</h1><p>Computed for async functions</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> asyncComputed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token function">asyncComputed</span><span class="token punctuation">(</span>\n  <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">mockLookUp</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// initial state</span>\n<span class="token punctuation">)</span>\n</code></pre></div><h3 id="evaluation-state"><a class="header-anchor" href="#evaluation-state" aria-hidden="true">#</a> Evaluation State</h3><p>You will need to pass a ref to track if the async function is evaluating,</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> asyncComputed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> evaluating <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token function">asyncComputed</span><span class="token punctuation">(</span>\n  <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* your logic */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">null</span><span class="token punctuation">,</span>\n  evaluating<span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre></div><h3 id="oncancel"><a class="header-anchor" href="#oncancel" aria-hidden="true">#</a> onCancel</h3><p>When the computed source changed before the previous async function gets resolved, you may want to cancel the previous one. Here is an example showing how to incorporate with the fetch API.</p><div class="language-js"><pre><code><span class="token keyword">const</span> packageName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;@vueuse/core&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> downloads <span class="token operator">=</span> <span class="token function">asyncComputed</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">onCancel</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> abortController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token function">onCancel</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> abortController<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.npmjs.org/downloads/point/last-week/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>packageName<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> signal<span class="token operator">:</span> abortController<span class="token punctuation">.</span>signal <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span>ok <span class="token operator">?</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">{</span> downloads<span class="token operator">:</span> <span class="token string">&#39;â€”&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">.</span>downloads<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="lazy"><a class="header-anchor" href="#lazy" aria-hidden="true">#</a> Lazy</h3><p>By default, <a href="/core/asyncComputed/"><code>asyncComputed</code></a>will start resolving immediately on creation, specify <code>lazy: true</code> to make it start resolving on the first accessing.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> asyncComputed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> evaluating <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token function">asyncComputed</span><span class="token punctuation">(</span>\n  <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">/* your logic */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> lazy<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> evaluating <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre></div><h2 id="caveats"><a class="header-anchor" href="#caveats" aria-hidden="true">#</a> Caveats</h2><ul><li><p>Just like Vue&#39;s built-in <code>computed</code> function, <code>useAsyncComputed</code> does dependency tracking and is automatically re-evaluated when dependencies change. Note however that only dependency referenced in the first call stack are considered for this. In other words: <strong>Dependencies that are accessed asynchronously will not trigger re-evaluation of the async computed value.</strong></p></li><li><p>As opposed to Vue&#39;s built-in <code>computed</code> function, re-evaluation of the async computed value is triggered whenever dependencies are changing, regardless of whether its result is currently being tracked or not.</p></li></ul>',15),c=t('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token comment">/**\n * Handle overlapping async evaluations.\n *\n * @param cancelCallback The provided callback is invoked when a re-evaluation of the computed value is triggered before the previous one finished\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">AsyncComputedOnCancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cancelCallback<span class="token operator">:</span> Fn<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n<span class="token comment">/**\n * Additional options for asyncComputed\n *\n * @property lazy         Should value be evaluated lazily\n * @property evaluating   Ref passed to receive the updated of async evaluation\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">AsyncComputedOptions</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  lazy<span class="token operator">?</span><span class="token operator">:</span> Boolean\n  evaluating<span class="token operator">?</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/**\n * Create an asynchronous computed dependency.\n *\n * @see /asyncComputed\n * @param evaluationCallback     The promise-returning callback which generates the computed value\n * @param initialState           The initial state, used until the first evaluation finishes\n * @param optionsOrRef           Additional options or a ref passed to receive the updates of the async evaluation\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">asyncComputed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  <span class="token function-variable function">evaluationCallback</span><span class="token operator">:</span> <span class="token punctuation">(</span>onCancel<span class="token operator">:</span> AsyncComputedOnCancel<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  initialState<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  optionsOrRef<span class="token operator">?</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">|</span> AsyncComputedOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/asyncComputed/index.ts" target="_blank" rel="noopener noreferrer">Source</a> â€¢ <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/asyncComputed/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4);o.render=function(t,e,o,l,r,u){return n(),a("div",null,[p,s("FOOTER_STARTS"),c,s("FOOTER_ENDS")])};export default o;export{e as __pageData};
