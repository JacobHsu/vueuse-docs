import{_ as s}from"./DemoContainer.vue_vue&type=script&setup=true&lang.538fc852.js";import{f as n,n as a,o as t,c as o,l as e,v as p,u as c,a as r,t as l,w as u,b as k,e as i}from"./app.5f9bb12a.js";import{s as d}from"./utils.8fd68d5f.js";const g={lang:"json"};var f=n({setup(s){const n=a("vue-use-locale-storage",{name:"Banana",color:"Yellow",size:"Medium"}),u=d(n.value);return(s,a)=>(t(),o("div",null,[e(r("input",{"onUpdate:modelValue":a[1]||(a[1]=s=>c(n).name=s),type:"text"},null,512),[[p,c(n).name]]),e(r("input",{"onUpdate:modelValue":a[2]||(a[2]=s=>c(n).color=s),type:"text"},null,512),[[p,c(n).color]]),e(r("input",{"onUpdate:modelValue":a[3]||(a[3]=s=>c(n).size=s),type:"text"},null,512),[[p,c(n).size]]),r("pre",g,l(c(u)),1)]))}});const m=i('<h1 id="usestorage"><a class="header-anchor" href="#usestorage" aria-hidden="true">#</a> useStorage</h1><p>Reactive <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noopener noreferrer">LocalStorage</a>/<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage" target="_blank" rel="noopener noreferrer">SessionStorage</a></p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStorage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token comment">// bind object</span>\n<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">&#39;my-store&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> greeting<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// bind boolean</span>\n<span class="token keyword">const</span> flag <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">&#39;my-flag&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// returns Ref&lt;boolean&gt;</span>\n\n<span class="token comment">// bind number</span>\n<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">&#39;my-count&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// returns Ref&lt;number&gt;</span>\n\n<span class="token comment">// bind string with SessionStorage</span>\n<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">&#39;my-id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;some-string-id&#39;</span><span class="token punctuation">,</span> sessionStorage<span class="token punctuation">)</span> <span class="token comment">// returns Ref&lt;string&gt;</span>\n\n<span class="token comment">// delete data from storage</span>\nstate<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>\n</code></pre></div><h2 id="custom-serialization"><a class="header-anchor" href="#custom-serialization" aria-hidden="true">#</a> Custom Serialization</h2><p>By default, <a href="/core/useStorage/"><code>useStorage</code></a>will smartly use the corresponding serializer based on the data type of provided default value. For example, <code>JSON.stringify</code> / <code>JSON.parse</code> will be used for objects, <code>Number.toString</code> / <code>parseFloat</code> for numbers, etc.</p><p>You can also provide your own serialization function to <a href="/core/useStorage/"><code>useStorage</code></a></p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStorage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token function">useStorage</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> \n    serializer<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">read</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">write</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Please note when you provide <code>null</code> as the default value, <a href="/core/useStorage/"><code>useStorage</code></a>can&#39;t assume the data type from it. In this case, you can provide a custom serializer or reuse the built-in ones explicitly.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStorage<span class="token punctuation">,</span> StorageSerializers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> objectLike <span class="token operator">=</span> <span class="token function">useStorage</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> serializer<span class="token operator">:</span> StorageSerializers<span class="token punctuation">.</span>object <span class="token punctuation">}</span><span class="token punctuation">)</span>\nobjectLike<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span>\n</code></pre></div>',10),b=i('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">Serializer<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">read</span><span class="token punctuation">(</span>raw<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span>\n  <span class="token function">write</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">const</span> StorageSerializers<span class="token operator">:</span> Record<span class="token operator">&lt;</span>\n  <span class="token string">&quot;boolean&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;any&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n  Serializer<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>\n<span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">StorageLike</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>\n  Storage<span class="token punctuation">,</span>\n  <span class="token string">&quot;getItem&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;setItem&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;removeItem&quot;</span>\n<span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">StorageOptions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span>\n  <span class="token keyword">extends</span> <span class="token class-name">ConfigurableEventFilter</span><span class="token punctuation">,</span>\n    ConfigurableWindow<span class="token punctuation">,</span>\n    ConfigurableFlush <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Watch for deep changes\n   *\n   * @default true\n   */</span>\n  deep<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token comment">/**\n   * Listen to storage changes, useful for multiple tabs application\n   *\n   * @default true\n   */</span>\n  listenToStorageChanges<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token comment">/**\n   * Custom data serialization\n   */</span>\n  serializer<span class="token operator">?</span><span class="token operator">:</span> Serializer<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useStorage</span><span class="token punctuation">(</span>\n  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  defaultValue<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  storage<span class="token operator">?</span><span class="token operator">:</span> StorageLike<span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> StorageOptions<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useStorage</span><span class="token punctuation">(</span>\n  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  defaultValue<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n  storage<span class="token operator">?</span><span class="token operator">:</span> StorageLike<span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> StorageOptions<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useStorage</span><span class="token punctuation">(</span>\n  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  defaultValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  storage<span class="token operator">?</span><span class="token operator">:</span> StorageLike<span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> StorageOptions<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useStorage</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  defaultValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  storage<span class="token operator">?</span><span class="token operator">:</span> StorageLike<span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> StorageOptions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useStorage</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  defaultValue<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  storage<span class="token operator">?</span><span class="token operator">:</span> StorageLike<span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> StorageOptions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useStorage/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useStorage/demo.vue" target="_blank" rel="noopener noreferrer">Demo</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useStorage/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4),y='{"title":"useStorage","description":"","frontmatter":"category State","headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Custom Serialization","slug":"custom-serialization"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/useStorage/index.md","lastUpdated":1626320652930}',S={};const h=Object.assign(S,{setup:function(n){return(n,a)=>{const e=s;return t(),o("div",null,[r(e,null,{default:u((()=>[r(f)])),_:1}),m,k("FOOTER_STARTS"),b,k("FOOTER_ENDS")])}}});export default h;export{y as __pageData};
