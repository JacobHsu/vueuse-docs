import{o as n,c as s,e as a}from"./app.5f9bb12a.js";const t='{"title":"Best Practice","description":"","frontmatter":{},"headers":[{"level":3,"title":"Destructuring","slug":"destructuring"}],"relativePath":"guide/best-practice.md","lastUpdated":1626320652930}',e={},o=a('<h1 id="best-practice"><a class="header-anchor" href="#best-practice" aria-hidden="true">#</a> Best Practice</h1><h3 id="destructuring"><a class="header-anchor" href="#destructuring" aria-hidden="true">#</a> Destructuring</h3><p>Most of the functions in VueUse returns an <strong>object of refs</strong> that you can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener noreferrer">ES6&#39;s object destructure</a> syntax to take what you need. For example:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMouse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token comment">// &quot;x&quot; and &quot;y&quot; are refs</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> mouse <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mouse<span class="token punctuation">.</span>x<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n</code></pre></div><p>If you prefer to use them as object properties style, you can unwrap the refs by using <code>reactive()</code>. For example:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> \n<span class="token keyword">import</span> <span class="token punctuation">{</span> useMouse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> mouse <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// &quot;x&quot; and &quot;y&quot; will be auto unwrapped, no `.value` needed</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mouse<span class="token punctuation">.</span>x<span class="token punctuation">)</span>\n</code></pre></div>',6);e.render=function(a,t,e,p,c,u){return n(),s("div",null,[o])};export default e;export{t as __pageData};
