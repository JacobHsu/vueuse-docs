import{o as e,c as n,b as s,e as a}from"./app.5f9bb12a.js";const r='{"title":"useIpcRendererOn","description":"","frontmatter":"category \'@Electron\'","headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"electron/useIpcRendererOn/index.md","lastUpdated":1626320652930}',t={},o=a('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>available in add-on <a href="/electron/README.html"><code>@vueuse/electron</code></a></p></div><h1 id="useipcrendereron"><a class="header-anchor" href="#useipcrendereron" aria-hidden="true">#</a> useIpcRendererOn</h1><p>Use <a href="https://www.electronjs.org/docs/api/ipc-renderer#ipcrendereronchannel-listener" target="_blank" rel="noopener noreferrer">ipcRenderer.on</a> with ease and <a href="https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererremovelistenerchannel-listener" target="_blank" rel="noopener noreferrer">ipcRenderer.removeListener</a> automatically on unmounted.</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useIpcRendererOn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/electron&#39;</span>\n\n<span class="token comment">// enable nodeIntegration if you don&#39;t provide ipcRenderer explicitly </span>\n<span class="token comment">// @see: https://www.electronjs.org/docs/api/webview-tag#nodeintegration</span>\n<span class="token comment">// remove listener automatically on unmounted</span>\n<span class="token function">useIpcRendererOn</span><span class="token punctuation">(</span><span class="token string">&#39;custom-event&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',5),p=a('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token comment">/**\n * Listens to channel, when a new message arrives listener would be called with listener(event, args...).\n * [ipcRenderer.removeListener](https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererremovelistenerchannel-listener) automatically on unmounted.\n *\n * You need to provide `ipcRenderer` to this function.\n *\n * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrendereronchannel-listener\n * @export\n * @param {IpcRenderer} ipcRenderer\n * @param {string} channel\n * @param {IpcRendererListener} listener\n * @returns {IpcRenderer}\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useIpcRendererOn</span><span class="token punctuation">(</span>\n  ipcRenderer<span class="token operator">:</span> IpcRenderer<span class="token punctuation">,</span>\n  channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  listener<span class="token operator">:</span> IpcRendererListener\n<span class="token punctuation">)</span><span class="token operator">:</span> IpcRenderer\n<span class="token comment">/**\n * Listens to channel, when a new message arrives listener would be called with listener(event, args...).\n * [ipcRenderer.removeListener](https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererremovelistenerchannel-listener) automatically on unmounted.\n *\n * `ipcRenderer` will be automatically gotten.\n *\n * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrendereronchannel-listener\n * @export\n * @param {string} channel\n * @param {IpcRendererListener} listener\n * @returns {IpcRenderer}\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useIpcRendererOn</span><span class="token punctuation">(</span>\n  channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  listener<span class="token operator">:</span> IpcRendererListener\n<span class="token punctuation">)</span><span class="token operator">:</span> IpcRenderer\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/electron/useIpcRendererOn/index.ts" target="_blank" rel="noopener noreferrer">Source</a> â€¢ <a href="https://github.com/vueuse/vueuse/blob/main/packages/electron/useIpcRendererOn/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4);t.render=function(a,r,t,c,l,i){return e(),n("div",null,[o,s("FOOTER_STARTS"),p,s("FOOTER_ENDS")])};export default t;export{r as __pageData};
