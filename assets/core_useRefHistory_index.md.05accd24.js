import{_ as n}from"./DemoContainer.vue_vue&type=script&setup=true&lang.538fc852.js";import{f as s,a8 as a,aw as t,o,c as e,a as p,t as c,u as r,w as l,F as u,E as i,aa as k,d,b as h,e as f}from"./app.5f9bb12a.js";import{_ as m}from"./Note.4d65cb61.js";const y=p("span",{class:"ml-2"},"/",-1),g=p("br",null,null,-1),v=p("br",null,null,-1),b=d("History (limited to 10 records for demo)"),w={class:"code-block mt-4"},R={class:"opacity-50 mr-2 font-mono"},H={class:"font-mono"};var _=s({setup(n){const{count:s,inc:d,dec:h}=a(),{history:f,undo:_,redo:S,canUndo:T,canRedo:C}=t(s,{capacity:10});return(n,a)=>{const t=m;return o(),e(u,null,[p("div",null,"Count: "+c(r(s)),1),p("button",{onClick:a[1]||(a[1]=n=>r(d)())}," Increment "),p("button",{onClick:a[2]||(a[2]=n=>r(h)())}," Decrement "),y,p("button",{disabled:!r(T),onClick:a[3]||(a[3]=n=>r(_)())}," Undo ",8,["disabled"]),p("button",{disabled:!r(C),onClick:a[4]||(a[4]=n=>r(S)())}," Redo ",8,["disabled"]),g,v,p(t,null,{default:l((()=>[b])),_:1}),p("div",w,[(o(!0),e(u,null,i(r(f),(n=>{return o(),e("div",{key:n.timestamp},[p("span",R,c((s=n.timestamp,k(s).format())),1),p("span",H,"{ value: "+c(n.snapshot)+" }",1)]);var s})),128))])],64)}}});const S=p("h1",{id:""},[p("a",{class:"header-anchor",href:"#","aria-hidden":"true"},"#")],-1),T=f('<p>useRefHistory</p><p>Track the change history of a ref, also provides undo and redo functionality</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-ts"><div class="highlight-lines"><br><br><br><br><div class="highlighted">Â </div><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> \n<span class="token keyword">import</span> <span class="token punctuation">{</span> useRefHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> undo<span class="token punctuation">,</span> redo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRefHistory</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>\n</code></pre></div><p>Internally, <code>watch</code> is used to trigger a history point when the ref value is modified. This means that history points are triggered asynchronously batching modifications in the same &quot;tick&quot;.</p><div class="language-ts"><pre><code>counter<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>\n\n<span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token comment">/* [\n  { snapshot: 1, timestamp: 1601912898062 }, \n  { snapshot: 0, timestamp: 1601912898061 }\n] */</span>\n</code></pre></div><p>You can use <code>undo</code> to reset the ref value to the last history point.</p><div class="language-ts"><pre><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n</code></pre></div><h3 id="objects-arrays"><a class="header-anchor" href="#objects-arrays" aria-hidden="true">#</a> Objects / arrays</h3><p>When working with objects or arrays, since changing their attributes does not change the reference, it will not trigger the committing. To track attribute changes, you would need to pass <code>deep: true</code>. It will create clones for each history record.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> undo<span class="token punctuation">,</span> redo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRefHistory</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nstate<span class="token punctuation">.</span>value<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span>\n\n<span class="token keyword">await</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token comment">/* [\n  { snapshot: { foo: 2, bar: &#39;bar&#39; } },\n  { snapshot: { foo: 1, bar: &#39;bar&#39; } }\n] */</span>\n</code></pre></div><h4 id="custom-clone-function"><a class="header-anchor" href="#custom-clone-function" aria-hidden="true">#</a> Custom Clone Function</h4><p><a href="/core/useRefHistory/"><code>useRefHistory</code></a>only embeds the minimal clone function <code>x =&gt; JSON.parse(JSON.stringify(x))</code>. To use a full featured or custom clone function, you can set up via the <code>dump</code> options.</p><p>For example, using <a href="https://lodash.com/docs/4.17.15#cloneDeep" target="_blank" rel="noopener noreferrer">lodash&#39;s <code>cloneDeep</code></a>:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> cloneDeep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash-es&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useRefHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> refHistory <span class="token operator">=</span> <span class="token function">useRefHistory</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span> dump<span class="token operator">:</span> cloneDeep <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Or a more lightweight <a href="https://github.com/lukeed/klona" target="_blank" rel="noopener noreferrer"><code>klona</code></a>:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> klona <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;klona&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useRefHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> refHistory <span class="token operator">=</span> <span class="token function">useRefHistory</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span> dump<span class="token operator">:</span> klona <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="custom-dump-and-parse-function"><a class="header-anchor" href="#custom-dump-and-parse-function" aria-hidden="true">#</a> Custom Dump and Parse Function</h4><p>Instead of using the <code>clone</code> param, you can pass custom functions to control the serialization and parsing. In case you do not need history values to be objects, this can save an extra clone when undoing. It is also useful in case you want to have the snapshots already stringified to be saved to local storage for example.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRefHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> refHistory <span class="token operator">=</span> <span class="token function">useRefHistory</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span> \n  dump<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span>stringify<span class="token punctuation">,</span>\n  parse<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span>parse\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="history-capacity"><a class="header-anchor" href="#history-capacity" aria-hidden="true">#</a> History Capacity</h3><p>We will keep all the history by default (unlimited) until you explicitly clear them up, you can set the maximal amount of history to be kept by <code>capacity</code> options.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> refHistory <span class="token operator">=</span> <span class="token function">useRefHistory</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  capacity<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token comment">// limit to 15 history records</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nrefHistory<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// explicitly clear all the history</span>\n</code></pre></div><h3 id="history-flush-timing"><a class="header-anchor" href="#history-flush-timing" aria-hidden="true">#</a> History Flush Timing</h3><p>From <a href="https://v3.vuejs.org/guide/reactivity-computed-watchers.html#effect-flush-timing" target="_blank" rel="noopener noreferrer">Vue&#39;s documentation</a>: Vue&#39;s reactivity system buffers invalidated effects and flush them asynchronously to avoid unnecessary duplicate invocation when there are many state mutations happening in the same &quot;tick&quot;.</p><p>In the same way as <code>watch</code>, you can modify the flush timing using the <code>flush</code> option.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> refHistory <span class="token operator">=</span> <span class="token function">useRefHistory</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  flush<span class="token operator">:</span> <span class="token string">&#39;sync&#39;</span> <span class="token comment">// options &#39;pre&#39; (default), &#39;post&#39; and &#39;sync&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>The default is <code>&#39;pre&#39;</code>, to align this composable with the default for Vue&#39;s watchers. This also helps to avoid common issues, like several history points generated as part of a multi-step update to a ref value that can break invariants of the app state. You can use <code>commit()</code> in case you need to create multiple history points in the same &quot;tick&quot;</p><div class="language-ts"><pre><code><span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> commit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRefHistory</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n\nr<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nr<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token comment">/* [\n  { snapshot: 2 },\n  { snapshot: 1 },\n  { snapshot: 0 },\n] */</span>\n</code></pre></div><p>On the other hand, when using flush <code>&#39;sync&#39;</code>, you can use <code>batch(fn)</code> to generate a single history point for several sync operations</p><div class="language-ts"><pre><code><span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> names<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> batch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRefHistory</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">{</span> flush<span class="token operator">:</span> <span class="token string">&#39;sync&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">batch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  r<span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;Lena&#39;</span><span class="token punctuation">)</span>\n  r<span class="token punctuation">.</span>version<span class="token operator">++</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token comment">/* [\n  { snapshot: { names: [ &#39;Lena&#39; ], version: 2 },\n  { snapshot: { names: [], version: 1 },\n] */</span>\n</code></pre></div><p>If <code>{ flush: &#39;sync&#39;, deep: true }</code> is used, <code>batch</code> is also useful when doing a mutable <code>splice</code> in an array. <code>splice</code> can generate up to three atomic operations that will be pushed to the ref history.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> batch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRefHistory</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">{</span> deep<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> flush<span class="token operator">:</span> <span class="token string">&#39;sync&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">batch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  arr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// batch ensures only one history point is generated</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Another option is to avoid mutating the original ref value using <code>arr.value = [...arr.value].splice(1,1)</code>.</p><h2 id="related-functions"><a class="header-anchor" href="#related-functions" aria-hidden="true">#</a> Related Functions</h2><ul><li><code>useManualRefHistory</code></li></ul><h2 id="recommended-readings"><a class="header-anchor" href="#recommended-readings" aria-hidden="true">#</a> Recommended Readings</h2><ul><li><a href="https://patak.dev/vue/history-and-persistence.html" target="_blank" rel="noopener noreferrer">History and Persistence</a> - by <a href="https://github.com/matias-capeletto" target="_blank" rel="noopener noreferrer">@matias-capeletto</a></li></ul>',38),C=f('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UseRefHistoryOptions<span class="token operator">&lt;</span>Raw<span class="token punctuation">,</span> Serialized <span class="token operator">=</span> Raw<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Watch for deep changes, default to false\n   *\n   * When set to true, it will also create clones for values store in the history\n   *\n   * @default false\n   */</span>\n  deep<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token comment">/**\n   * The flush option allows for greater control over the timing of a history point, default to &#39;pre&#39;\n   *\n   * Possible values: &#39;pre&#39;, &#39;post&#39;, &#39;sync&#39;\n   * It works in the same way as the flush option in watch and watch effect in vue reactivity\n   *\n   * @default &#39;pre&#39;\n   */</span>\n  flush<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;pre&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;post&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;sync&quot;</span>\n  <span class="token comment">/**\n   * Maximum number of history to be kept. Default to unlimited.\n   */</span>\n  capacity<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token comment">/**\n   * Clone when taking a snapshot, shortcut for dump: JSON.parse(JSON.stringify(value)).\n   * Default to false\n   *\n   * @default false\n   */</span>\n  clone<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> CloneFn<span class="token operator">&lt;</span>Raw<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Serialize data into the history\n   */</span>\n  dump<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> Raw<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Serialized\n  <span class="token comment">/**\n   * Deserialize data from the history\n   */</span>\n  parse<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> Serialized<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Raw\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UseRefHistoryReturn<span class="token operator">&lt;</span>Raw<span class="token punctuation">,</span> Serialized<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Bypassed tracking ref from the argument\n   */</span>\n  source<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>Raw<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * An array of history records for undo, newest comes to first\n   */</span>\n  history<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UseRefHistoryRecord<span class="token operator">&lt;</span>Serialized<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Last history point, source can be different if paused\n   */</span>\n  last<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UseRefHistoryRecord<span class="token operator">&lt;</span>Serialized<span class="token operator">&gt;&gt;</span>\n  <span class="token comment">/**\n   * Same as &#39;history&#39;\n   */</span>\n  undoStack<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UseRefHistoryRecord<span class="token operator">&lt;</span>Serialized<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Records array for redo\n   */</span>\n  redoStack<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UseRefHistoryRecord<span class="token operator">&lt;</span>Serialized<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * A ref representing if the tracking is enabled\n   */</span>\n  isTracking<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * A ref representing if undo is possible (non empty undoStack)\n   */</span>\n  canUndo<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * A ref representing if redo is possible (non empty redoStack)\n   */</span>\n  canRedo<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Undo changes\n   */</span>\n  <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Redo changes\n   */</span>\n  <span class="token function">redo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Clear all the history\n   */</span>\n  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Pause change tracking\n   */</span>\n  <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Resume change tracking\n   *\n   * @param [commit] if true, a history record will be create after resuming\n   */</span>\n  <span class="token function">resume</span><span class="token punctuation">(</span>commit<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Create new a new history record\n   */</span>\n  <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Reset ref&#39;s value with lastest history\n   */</span>\n  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * A sugar for auto pause and auto resuming within a function scope\n   *\n   * @param fn\n   */</span>\n  <span class="token function">batch</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>cancel<span class="token operator">:</span> Fn<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Clear the data and stop the watch\n   */</span>\n  <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/**\n * Track the change history of a ref, also provides undo and redo functionality.\n *\n * @see /useRefHistory\n * @param source\n * @param options\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRefHistory</span><span class="token generic class-name"><span class="token operator">&lt;</span>Raw<span class="token punctuation">,</span> Serialized <span class="token operator">=</span> Raw<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  source<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>Raw<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> UseRefHistoryOptions<span class="token operator">&lt;</span>Raw<span class="token punctuation">,</span> Serialized<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> UseRefHistoryReturn<span class="token operator">&lt;</span>Raw<span class="token punctuation">,</span> Serialized<span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useRefHistory/index.ts" target="_blank" rel="noopener noreferrer">Source</a> â¢ <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useRefHistory/demo.vue" target="_blank" rel="noopener noreferrer">Demo</a> â¢ <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useRefHistory/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4),x='{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":3,"title":"Objects / arrays","slug":"objects-arrays"},{"level":3,"title":"History Capacity","slug":"history-capacity"},{"level":3,"title":"History Flush Timing","slug":"history-flush-timing"},{"level":2,"title":"Related Functions","slug":"related-functions"},{"level":2,"title":"Recommended Readings","slug":"recommended-readings"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/useRefHistory/index.md","lastUpdated":1626320652926}',D={};const O=Object.assign(D,{setup:function(s){return(s,a)=>{const t=n;return o(),e("div",null,[S,p(t,null,{default:l((()=>[p(_)])),_:1}),T,h("FOOTER_STARTS"),C,h("FOOTER_ENDS")])}}});export default O;export{x as __pageData};
