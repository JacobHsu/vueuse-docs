import{_ as s}from"./DemoContainer.vue_vue&type=script&setup=true&lang.538fc852.js";import{f as a,r as n,N as t,O as e,u as o,o as p,c as r,a as l,w as c,t as u,l as i,v as k,d,b,e as g}from"./app.5f9bb12a.js";import{_ as m}from"./Note.4d65cb61.js";const f={key:0},h=d(" Clipboard Permission: read "),y=d(" | write "),v=d(" Current copied: "),C={key:1};var _=a({setup(s){const a=n(""),{text:d,isSupported:b,copy:g}=t(),_=e("clipboard-read"),w=e("clipboard-write");return(s,n)=>{const t=m;return o(b)?(p(),r("div",f,[l(t,null,{default:c((()=>[h,l("b",null,u(o(_)),1),y,l("b",null,u(o(w)),1)])),_:1}),l("p",null,[v,l("code",null,u(o(d)||"none"),1)]),i(l("input",{"onUpdate:modelValue":n[1]||(n[1]=s=>a.value=s),type:"text"},null,512),[[k,a.value]]),l("button",{onClick:n[2]||(n[2]=s=>o(g)(a.value))}," Copy ")])):(p(),r("p",C," Your browser does not support Clipboard API "))}}});const w=g('<h1 id="useclipboard"><a class="header-anchor" href="#useclipboard" aria-hidden="true">#</a> useClipboard</h1><p>Reactive <a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API" target="_blank" rel="noopener noreferrer">Clipboard API</a>. Provides the ability to respond to clipboard commands (cut, copy, and paste) as well as to asynchronously read from and write to the system clipboard. Access to the contents of the clipboard is gated behind the Permissions API without user permission, reading or altering the clipboard contents is not permitted.</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useClipboard <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> text<span class="token punctuation">,</span> copy<span class="token punctuation">,</span> copied<span class="token punctuation">,</span> isSupported <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useClipboard</span><span class="token punctuation">(</span><span class="token punctuation">{</span> source <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>copy<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- by default, `copied` will be reset in 1.5s --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>!copied<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>Copy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>Copied!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',5),S=g('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ClipboardOptions<span class="token operator">&lt;</span>Source<span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ConfigurableNavigator</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Enabled reading for clipboard\n   *\n   * @default true\n   */</span>\n  read<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token comment">/**\n   * Copy source\n   */</span>\n  source<span class="token operator">?</span><span class="token operator">:</span> Source\n  <span class="token comment">/**\n   * Milliseconds to reset state of `copied` ref\n   *\n   * @default 1500\n   */</span>\n  copiedDuring<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ClipboardReturn<span class="token operator">&lt;</span>Optional<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  isSupported<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  text<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n  copied<span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  copy<span class="token operator">:</span> Optional <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span>\n    <span class="token operator">?</span> <span class="token punctuation">(</span>text<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>\n    <span class="token operator">:</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/**\n * Reactive Clipboard API.\n *\n * @see /useClipboard\n * @param options\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useClipboard</span><span class="token punctuation">(</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> ClipboardOptions<span class="token operator">&lt;</span><span class="token keyword">undefined</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> ClipboardReturn<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useClipboard</span><span class="token punctuation">(</span>\n  options<span class="token operator">:</span> ClipboardOptions<span class="token operator">&lt;</span>MaybeRef<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> ClipboardReturn<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useClipboard/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useClipboard/demo.vue" target="_blank" rel="noopener noreferrer">Demo</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useClipboard/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4),T='{"title":"useClipboard","description":"","frontmatter":"category Browser","headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/useClipboard/index.md","lastUpdated":1626320652922}',x={};const P=Object.assign(x,{setup:function(a){return(a,n)=>{const t=s;return p(),r("div",null,[l(t,null,{default:c((()=>[l(_)])),_:1}),w,b("FOOTER_STARTS"),S,b("FOOTER_ENDS")])}}});export default P;export{T as __pageData};
