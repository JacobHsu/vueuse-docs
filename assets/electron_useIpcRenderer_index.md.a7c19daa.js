import{o as n,c as s,b as a,e}from"./app.5f9bb12a.js";const t='{"title":"useIpcRenderer","description":"","frontmatter":"category \'@Electron\'","headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"electron/useIpcRenderer/index.md","lastUpdated":1626320652930}',p={},o=e('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>available in add-on <a href="/electron/README.html"><code>@vueuse/electron</code></a></p></div><h1 id="useipcrenderer"><a class="header-anchor" href="#useipcrenderer" aria-hidden="true">#</a> useIpcRenderer</h1><p>Provides <a href="https://www.electronjs.org/docs/api/ipc-renderer" target="_blank" rel="noopener noreferrer">ipcRenderer</a> and it&#39;s all APIs.</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useIpcRenderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/electron&#39;</span>\n\n<span class="token comment">// enable nodeIntegration if you don&#39;t provide ipcRenderer explicitly </span>\n<span class="token comment">// @see: https://www.electronjs.org/docs/api/webview-tag#nodeintegration</span>\n<span class="token keyword">const</span> ipcRenderer <span class="token operator">=</span> <span class="token function">useIpcRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Ref result will return</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> ipcRenderer<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;custom-channel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;some data&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">.</span>value<span class="token operator">?.</span>msg<span class="token punctuation">)</span>\n\n<span class="token comment">// remove listener automatically on unmounted</span>\nipcRenderer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;custom-event&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre></div>',5),r=e('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token comment">/**\n * Result from useIpcRenderer\n *\n * @see https://www.electronjs.org/docs/api/ipc-renderer\n * @export\n * @interface UseIpcRendererReturn\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UseIpcRendererReturn</span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Listens to channel, when a new message arrives listener would be called with listener(event, args...).\n   * [ipcRenderer.removeListener](https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererremovelistenerchannel-listener) automatically on unmounted.\n   *\n   * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrendereronchannel-listener\n   * @param {string} channel\n   * @param {IpcRendererListener} listener\n   * @returns {IpcRenderer}\n   */</span>\n  <span class="token function">on</span><span class="token punctuation">(</span>channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> listener<span class="token operator">:</span> IpcRendererListener<span class="token punctuation">)</span><span class="token operator">:</span> IpcRenderer\n  <span class="token comment">/**\n   * Adds a one time listener function for the event. This listener is invoked only the next time a message is sent to channel, after which it is removed.\n   *\n   * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrendereroncechannel-listener\n   * @param {string} channel\n   * @param {(event: IpcRendererEvent, ...args: any[]) =&gt; void} listener\n   * @returns {IpcRenderer}\n   */</span>\n  <span class="token function">once</span><span class="token punctuation">(</span>\n    channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">listener</span><span class="token operator">:</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> IpcRendererEvent<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> IpcRenderer\n  <span class="token comment">/**\n   * Removes the specified listener from the listener array for the specified channel.\n   *\n   * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererremovelistenerchannel-listener\n   * @param {string} channel\n   * @param {(...args: any[]) =&gt; void} listener\n   * @returns {IpcRenderer}\n   */</span>\n  <span class="token function">removeListener</span><span class="token punctuation">(</span>\n    channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">listener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> IpcRenderer\n  <span class="token comment">/**\n   * Removes all listeners, or those of the specified channel.\n   *\n   * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererremovealllistenerschannel\n   * @param {string} channel\n   * @returns {IpcRenderer}\n   */</span>\n  <span class="token function">removeAllListeners</span><span class="token punctuation">(</span>channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> IpcRenderer\n  <span class="token comment">/**\n   * Send an asynchronous message to the main process via channel, along with arguments.\n   *\n   * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrenderersendchannel-args\n   * @param {string} channel\n   * @param {...any[]} args\n   */</span>\n  <span class="token function">send</span><span class="token punctuation">(</span>channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Returns Promise&lt;any&gt; - Resolves with the response from the main process.\n   * Send a message to the main process via channel and expect a result ~~asynchronously~~.\n   * As composition-api, it makes asynchronous operations look like synchronous.\n   *\n   * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererinvokechannel-args\n   * @template T\n   * @param {string} channel\n   * @param {...any[]} args\n   * @returns {(Ref&lt;T | null&gt;)}\n   */</span>\n  <span class="token generic-function"><span class="token function">invoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Returns any - The value sent back by the ipcMain handler.\n   * Send a message to the main process via channel and expect a result synchronously.\n   *\n   * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrenderersendsyncchannel-args\n   * @template T\n   * @param {string} channel\n   * @param {...any[]} args\n   * @returns {(Ref&lt;T | null&gt;)}\n   */</span>\n  <span class="token generic-function"><span class="token function">sendSync</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Send a message to the main process, optionally transferring ownership of zero or more MessagePort objects.\n   *\n   * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererpostmessagechannel-message-transfer\n   * @param {string} channel\n   * @param {*} message\n   * @param {MessagePort[]} [transfer]\n   */</span>\n  <span class="token function">postMessage</span><span class="token punctuation">(</span>channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> transfer<span class="token operator">?</span><span class="token operator">:</span> MessagePort<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Sends a message to a window with webContentsId via channel.\n   *\n   * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrenderersendtowebcontentsid-channel-args\n   * @param {number} webContentsId\n   * @param {string} channel\n   * @param {...any[]} args\n   */</span>\n  <span class="token function">sendTo</span><span class="token punctuation">(</span>webContentsId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Like ipcRenderer.send but the event will be sent to the &lt;webview&gt; element in the host page instead of the main process.\n   *\n   * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrenderersendtohostchannel-args\n   * @param {string} channel\n   * @param {...any[]} args\n   */</span>\n  <span class="token function">sendToHost</span><span class="token punctuation">(</span>channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/**\n * Get the `ipcRenderer` module with all APIs.\n *\n * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrenderersendtohostchannel-args\n * @export\n * @param {IpcRenderer} [ipcRenderer]\n * @returns {UseIpcRendererReturn}\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useIpcRenderer</span><span class="token punctuation">(</span>\n  ipcRenderer<span class="token operator">?</span><span class="token operator">:</span> IpcRenderer\n<span class="token punctuation">)</span><span class="token operator">:</span> UseIpcRendererReturn\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/electron/useIpcRenderer/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/electron/useIpcRenderer/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4);p.render=function(e,t,p,c,l,i){return n(),s("div",null,[o,a("FOOTER_STARTS"),r,a("FOOTER_ENDS")])};export default p;export{t as __pageData};
