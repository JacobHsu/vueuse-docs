import{o as n,c as s,b as a,e}from"./app.5f9bb12a.js";const t='{"title":"controlledComputed","description":"","frontmatter":{},"headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"shared/controlledComputed/index.md","lastUpdated":1626320652934}',o={},p=e('<h1 id="controlledcomputed"><a class="header-anchor" href="#controlledcomputed" aria-hidden="true">#</a> controlledComputed</h1><p>Explicitly define the deps of computed.</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> controlledComputed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">let</span> source <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> computedRef <span class="token operator">=</span> <span class="token function">controlledComputed</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> source<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token comment">// watch source, same as `watch`</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> counter<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token comment">// computed getter, same as `computed`</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p>With this, the changes of <code>counter</code> won&#39;t trigger <code>computedRef</code> to update but the <code>source</code> ref does.</p><div class="language-ts"><pre><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>computedRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n\ncounter<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>computedRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n\nsource<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>computedRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span>\n</code></pre></div>',6),c=e('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token comment">/**\n * Explicitly define the deps of computed.\n *\n * @param source\n * @param fn\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">controlledComputed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  source<span class="token operator">:</span> WatchSource<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/shared/controlledComputed/index.ts" target="_blank" rel="noopener noreferrer">Source</a> â€¢ <a href="https://github.com/vueuse/vueuse/blob/main/packages/shared/controlledComputed/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4);o.render=function(e,t,o,l,u,r){return n(),s("div",null,[p,a("FOOTER_STARTS"),c,a("FOOTER_ENDS")])};export default o;export{t as __pageData};
