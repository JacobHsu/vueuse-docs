import{_ as a}from"./DemoContainer.vue_vue&type=script&setup=true&lang.538fc852.js";import{o as n,c as s,a as t,f as e,Q as o,u as p,R as l,t as c,w as r,b as u,e as i}from"./app.5f9bb12a.js";const k={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",width:"1.2em",height:"1.2em",preserveAspectRatio:"xMidYMid meet",viewBox:"0 0 32 32"},d=t("path",{d:"M13.502 5.414a15.075 15.075 0 0 0 11.594 18.194a11.113 11.113 0 0 1-7.975 3.39c-.138 0-.278.005-.418 0a11.094 11.094 0 0 1-3.2-21.584M14.98 3a1.002 1.002 0 0 0-.175.016a13.096 13.096 0 0 0 1.825 25.981c.164.006.328 0 .49 0a13.072 13.072 0 0 0 10.703-5.555a1.01 1.01 0 0 0-.783-1.565A13.08 13.08 0 0 1 15.89 4.38A1.015 1.015 0 0 0 14.98 3z",fill:"currentColor"},null,-1);var g={name:"carbon-moon",render:function(a,t){return n(),s("svg",k,[d])}};const h={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",width:"1.2em",height:"1.2em",preserveAspectRatio:"xMidYMid meet",viewBox:"0 0 32 32"},m=t("path",{d:"M16 12.005a4 4 0 1 1-4 4a4.005 4.005 0 0 1 4-4m0-2a6 6 0 1 0 6 6a6 6 0 0 0-6-6z",fill:"currentColor"},null,-1),f=t("path",{d:"M5.394 6.813l1.414-1.415l3.506 3.506L8.9 10.318z",fill:"currentColor"},null,-1),v=t("path",{d:"M2 15.005h5v2H2z",fill:"currentColor"},null,-1),b=t("path",{d:"M5.394 25.197L8.9 21.691l1.414 1.415l-3.506 3.505z",fill:"currentColor"},null,-1),w=t("path",{d:"M15 25.005h2v5h-2z",fill:"currentColor"},null,-1),y=t("path",{d:"M21.687 23.106l1.414-1.415l3.506 3.506l-1.414 1.414z",fill:"currentColor"},null,-1),D=t("path",{d:"M25 15.005h5v2h-5z",fill:"currentColor"},null,-1),S=t("path",{d:"M21.687 8.904l3.506-3.506l1.414 1.415l-3.506 3.505z",fill:"currentColor"},null,-1),_=t("path",{d:"M15 2.005h2v5h-2z",fill:"currentColor"},null,-1);var C={name:"carbon-sun",render:function(a,t){return n(),s("svg",h,[m,f,v,b,w,y,D,S,_])}};const q={class:"ml-2"};var x=e({setup(a){const e=o(l);return(a,o)=>{const r=g,u=C;return n(),s("button",{onClick:o[1]||(o[1]=a=>p(e)())},[p(l)?(n(),s(r,{key:0})):(n(),s(u,{key:1})),t("span",q,c(p(l)?"Dark":"Light"),1)])}}});const T=i('<h1 id="usedark"><a class="header-anchor" href="#usedark" aria-hidden="true">#</a> useDark</h1><p>Reactive dark mode with auto data persistence.</p><h2 id="basic-usage"><a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a> Basic Usage</h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useDark<span class="token punctuation">,</span> useToggle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> isDark <span class="token operator">=</span> <span class="token function">useDark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> toggleDark <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span>isDark<span class="token punctuation">)</span>\n</code></pre></div><h2 id="behavior"><a class="header-anchor" href="#behavior" aria-hidden="true">#</a> Behavior</h2><p><a href="/core/useDark/"><code>useDark</code></a>combines with <a href="/core/usePreferredDark/"><code>usePreferredDark</code></a>and <a href="/core/useStorage/"><code>useStorage</code></a> On start up, it reads the value from localStorage/sessionStorage(the key is configurable) to see if there is user configured color scheme, if not, it will use users&#39; system preferences. When you change the <code>isDark</code> ref, it will update the corresponding element&#39;s attribute and then store the preference to storage for persistence.</p><blockquote><p>Please note <a href="/core/useDark/"><code>useDark</code></a>only handles the DOM attribute changes for you to apply proper selector in your CSS. It does NOT handle the actual style, theme or CSS for you.</p></blockquote><h2 id="configuration"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>By default, it uses <a href="https://tailwindcss.com/docs/dark-mode#toggling-dark-mode-manually" target="_blank" rel="noopener noreferrer">Tailwind CSS favored dark mode</a>, which enables dark mode when class <code>dark</code> is applied to the <code>html</code> tag, for example:</p><div class="language-html"><pre><code><span class="token comment">&lt;!--light--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!--dark--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dark<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>While you can customize it and make it works for most the of the CSS frameworks.</p><p>For example:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> isDark <span class="token operator">=</span> <span class="token function">useDark</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  selector<span class="token operator">:</span> <span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span>\n  attribute<span class="token operator">:</span> <span class="token string">&#39;color-scheme&#39;</span><span class="token punctuation">,</span>\n  valueDark<span class="token operator">:</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">,</span>\n  valueLight<span class="token operator">:</span> <span class="token string">&#39;light&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>will works like</p><div class="language-html"><pre><code><span class="token comment">&lt;!--light--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">color-scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>light<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!--dark--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">color-scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dark<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>If the configuration above still not fitting to your needs, you can use <code>onChanged</code> options to take ful controls over how you handle the updates</p><div class="language-ts"><pre><code><span class="token keyword">const</span> isDark <span class="token operator">=</span> <span class="token function">useDark</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">onChanged</span><span class="token punctuation">(</span>dark<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// update the dom, call the API or something</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="component"><a class="header-anchor" href="#component" aria-hidden="true">#</a> Component</h2><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UseDark</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ isDark, toggleDark }<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>toggleDark()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    Is Dark: {{ isDark }}\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UseDark</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',19),M=i('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">ColorSchemes</span> <span class="token operator">=</span> <span class="token string">&quot;light&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;dark&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;auto&quot;</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UseDarkOptions</span> <span class="token keyword">extends</span> <span class="token class-name">StorageOptions<span class="token operator">&lt;</span>ColorSchemes<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * CSS Selector for the target element applying to\n   *\n   * @default &#39;html&#39;\n   */</span>\n  selector<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token comment">/**\n   * HTML attribute applying the target element\n   *\n   * @default &#39;class&#39;\n   */</span>\n  attribute<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token comment">/**\n   * Value applying to the target element when isDark=true\n   *\n   * @default &#39;dark&#39;\n   */</span>\n  valueDark<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token comment">/**\n   * Value applying to the target element when isDark=false\n   *\n   * @default &#39;&#39;\n   */</span>\n  valueLight<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token comment">/**\n   * A custom handler for handle the updates.\n   * When specified, the default behavior will be overridded.\n   *\n   * @default undefined\n   */</span>\n  onChanged<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>isDark<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Key to persist the data into localStorage/sessionStorage.\n   *\n   * Pass `null` to disable persistence\n   *\n   * @default &#39;vueuse-color-scheme&#39;\n   */</span>\n  storageKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span>\n  <span class="token comment">/**\n   * Storage object, can be localStorage or sessionStorage\n   *\n   * @default localStorage\n   */</span>\n  storage<span class="token operator">?</span><span class="token operator">:</span> StorageLike\n<span class="token punctuation">}</span>\n<span class="token comment">/**\n * Reactive dark mode with auto data persistence.\n *\n * @see /useDark\n * @param options\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">useDark</span><span class="token punctuation">(</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> UseDarkOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> WritableComputedRef<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useDark/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useDark/demo.vue" target="_blank" rel="noopener noreferrer">Demo</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useDark/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4),A='{"title":"useDark","description":"","frontmatter":"category Browser","headers":[{"level":2,"title":"Basic Usage","slug":"basic-usage"},{"level":2,"title":"Behavior","slug":"behavior"},{"level":2,"title":"Configuration","slug":"configuration"},{"level":2,"title":"Component","slug":"component"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/useDark/index.md","lastUpdated":1626320652922}',z={};const O=Object.assign(z,{setup:function(e){return(e,o)=>{const p=a;return n(),s("div",null,[t(p,null,{default:r((()=>[t(x)])),_:1}),T,u("FOOTER_STARTS"),M,u("FOOTER_ENDS")])}}});export default O;export{A as __pageData};
