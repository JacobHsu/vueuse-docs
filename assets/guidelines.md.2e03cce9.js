import{o as n,c as s,e as a}from"./app.5f9bb12a.js";const e='{"title":"Guidelines","description":"","frontmatter":{},"headers":[{"level":2,"title":"General","slug":"general"},{"level":2,"title":"ShallowRef","slug":"shallowref"},{"level":2,"title":"Configurable Globals","slug":"configurable-globals"},{"level":2,"title":"Watch Options","slug":"watch-options"},{"level":2,"title":"Controls","slug":"controls"},{"level":2,"title":"isSupported Flag","slug":"issupported-flag"},{"level":2,"title":"Renderless Components","slug":"renderless-components"}],"relativePath":"guidelines.md","lastUpdated":1626320652930}',o={},t=a('<h1 id="guidelines"><a class="header-anchor" href="#guidelines" aria-hidden="true">#</a> Guidelines</h1><p>Here are the guidelines for VueUse functions. You could also take them as a reference for authoring your own composable functions or apps.</p><p>You can also find some reasons for those design decisions and also some tips for writing composable functions with <a href="https://github.com/antfu" target="_blank" rel="noopener noreferrer">Anthony Fu</a>&#39;s talk about VueUse:</p><ul><li><a href="https://antfu.me/posts/composable-vue-vueday-2021" target="_blank" rel="noopener noreferrer">Composable Vue</a> - at VueDay 2021</li><li><a href="https://antfu.me/posts/composable-vue-vueconf-china-2021" target="_blank" rel="noopener noreferrer">可组合的 Vue</a> - at VueConf China 2021 (in Chinese)</li></ul><h2 id="general"><a class="header-anchor" href="#general" aria-hidden="true">#</a> General</h2><ul><li>Import all Vue APIs from <code>&quot;vue-demi&quot;</code></li><li>Use <code>ref</code> instead <code>reactive</code> whenever possible</li><li>Use options object as arguments whenever possible to be more flexible for future extensions.</li><li>Use <code>shallowRef</code> instead of <code>ref</code> when wrapping large amounts of data.</li><li>Use <code>configurableWindow</code> (etc.) when using global variables like <code>window</code> to be flexible when working with multi-windows, testing mocks, and SSR.</li><li>When involved with Web APIs that are not yet implemented by the browser widely, also outputs <code>isSupported</code> flag</li><li>When using <code>watch</code> or <code>watchEffect</code> internally, also make the <code>immediate</code> and <code>flush</code> options configurable whenever possible</li><li>Use <a href="/shared/tryOnUnmounted/"><code>tryOnUnmounted</code></a> to clear the side-effects gracefully</li><li>Avoid using console logs</li></ul><p>Read also: <a href="/guide/best-practice.html">Best Practice</a></p><h2 id="shallowref"><a class="header-anchor" href="#shallowref" aria-hidden="true">#</a> ShallowRef</h2><p>Use <code>shallowRef</code> instead of <code>ref</code> when wrapping large amounts of data.</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFetch</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>url<span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// use `shallowRef` to prevent deep reactivity</span>\n  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token generic-function"><span class="token function">shallowRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token generic-function"><span class="token function">shallowRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>Error <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token function">unref</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> data<span class="token punctuation">.</span>value <span class="token operator">=</span> r<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> error<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">)</span>\n\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="configurable-globals"><a class="header-anchor" href="#configurable-globals" aria-hidden="true">#</a> Configurable Globals</h2><p>When using global variables like <code>window</code> or <code>document</code>, support <code>configurableWindow</code> or <code>configurableDocument</code> in the options interface to make the function flexible when for scenarios like multi-windows, testing mocks, and SSR.</p><p>Learn more about the implementation: <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/_configurable.ts" target="_blank" rel="noopener noreferrer"><code>_configurable.ts</code></a></p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigurableWindow<span class="token punctuation">,</span> defaultWindow <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../_configurable&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useActiveElement</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> HTMLElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  options<span class="token operator">:</span> ConfigurableWindow <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    <span class="token comment">// defaultWindow = isClient ? window : undefined</span>\n    window <span class="token operator">=</span> defaultWindow\n  <span class="token punctuation">}</span> <span class="token operator">=</span> options\n\n  <span class="token keyword">let</span> el<span class="token operator">:</span> <span class="token constant">T</span>\n  \n  <span class="token comment">// skip when in Node.js environment (SSR)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;blur&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      el <span class="token operator">=</span> window<span class="token operator">?.</span>document<span class="token punctuation">.</span>activeElement\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Usage example:</p><div class="language-ts"><pre><code><span class="token comment">// in iframe and bind to the parent window</span>\n<span class="token function">useActiveElement</span><span class="token punctuation">(</span><span class="token punctuation">{</span> window<span class="token operator">:</span> window<span class="token punctuation">.</span>parent <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="watch-options"><a class="header-anchor" href="#watch-options" aria-hidden="true">#</a> Watch Options</h2><p>When using <code>watch</code> or <code>watchEffect</code> internally, also make the <code>immediate</code> and <code>flush</code> options configurable whenever possible. For example <a href="/shared/debouncedWatch/"><code>debouncedWatch</code></a></p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> WatchOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-demi&#39;</span>\n\n<span class="token comment">// extend the watch options</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">DebouncedWatchOptions</span> <span class="token keyword">extends</span> <span class="token class-name">WatchOptions</span> <span class="token punctuation">{</span>\n  debounce<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">debouncedWatch</span><span class="token punctuation">(</span>\n  source<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n  cb<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> DebouncedWatchOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">watch</span><span class="token punctuation">(</span>\n    source<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token comment">/* ... */</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">,</span> <span class="token comment">// pass watch options</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="controls"><a class="header-anchor" href="#controls" aria-hidden="true">#</a> Controls</h2><p>We use the <code>controls</code> option allowing users to use functions with a single return for simple usages, while being able to have more controls and flexibility when needed. Read more: <a href="https://github.com/vueuse/vueuse/pull/362" target="_blank" rel="noopener noreferrer">#362</a>.</p><h4 id="when-to-provide-a-controls-option"><a class="header-anchor" href="#when-to-provide-a-controls-option" aria-hidden="true">#</a> When to provide a <code>controls</code> option</h4><ul><li>The function is more commonly used with single <code>ref</code> or</li><li>Examples: <a href="/core/useTimestamp/"><code>useTimestamp</code></a> <a href="/shared/useInterval/"><code>useInterval</code></a></li></ul><div class="language-ts"><pre><code><span class="token comment">// common usage</span>\n<span class="token keyword">const</span> timestamp <span class="token operator">=</span> <span class="token function">useTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// more controls for flexibility</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> timestamp<span class="token punctuation">,</span> pause<span class="token punctuation">,</span> resume <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> controls<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Refer to <a href="/core/useTimestamp/"><code>useTimestamp</code></a>s source code for the implementation of proper TypeScript support.</p><h4 id="when-not-to-provide-a-controls-option"><a class="header-anchor" href="#when-not-to-provide-a-controls-option" aria-hidden="true">#</a> When <strong>NOT</strong> to provide a <code>controls</code> option</h4><ul><li>The function is more commonly used with multiple returns</li><li>Examples: <a href="/core/useRafFn/"><code>useRafFn</code></a> <a href="/core/useRefHistory/"><code>useRefHistory</code></a></li></ul><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> pause<span class="token punctuation">,</span> resume <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRafFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="issupported-flag"><a class="header-anchor" href="#issupported-flag" aria-hidden="true">#</a> <code>isSupported</code> Flag</h2><p>When involved with Web APIs that are not yet implemented by the browser widely, also outputs <code>isSupported</code> flag.</p><p>For example <a href="/core/useShare/"><code>useShare</code></a></p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useShare</span><span class="token punctuation">(</span>\n  shareOptions<span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span>ShareOptions<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> ConfigurableNavigator <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> navigator <span class="token operator">=</span> defaultNavigator <span class="token punctuation">}</span> <span class="token operator">=</span> options\n  <span class="token keyword">const</span> isSupported <span class="token operator">=</span> navigator <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;canShare&#39;</span> <span class="token keyword">in</span> navigator\n\n  <span class="token keyword">const</span> <span class="token function-variable function">share</span> <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span>overrideOptions<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSupported<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">/* ...implementation */</span> \n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    isSupported<span class="token punctuation">,</span>\n    share<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="renderless-components"><a class="header-anchor" href="#renderless-components" aria-hidden="true">#</a> Renderless Components</h2><ul><li>Use render functions instead of Vue SFC</li><li>Wrap the props in <code>reactive</code> to easily pass them as props to the slot</li><li>Prefer to use the functions options as prop types instead of recreating them yourself</li><li>Only wrap the slot in an HTML element if the function needs a target to bind to</li></ul><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-demi&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useMouse<span class="token punctuation">,</span> MouseOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> UseMouse <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineComponent</span><span class="token generic class-name"><span class="token operator">&lt;</span>MouseOptions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;UseMouse&#39;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;touch&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;resetOnTouchEnds&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;initialValue&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">useMouse</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>slots<span class="token punctuation">.</span>default<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Sometimes a function may have multiple parameters, in that case, you maybe need to create a new interface to merge all the interfaces into a single interface for the component props.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useTimeAgo<span class="token punctuation">,</span> TimeAgoOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">UseTimeAgoComponentOptions</span> <span class="token keyword">extends</span> <span class="token class-name">Omit<span class="token operator">&lt;</span>TimeAgoOptions<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;controls&#39;</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  time<span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span>Date <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> UseTimeAgo <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineComponent</span><span class="token generic class-name"><span class="token operator">&lt;</span>UseTimeAgoComponentOptions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',37);o.render=function(a,e,o,p,c,l){return n(),s("div",null,[t])};export default o;export{e as __pageData};
