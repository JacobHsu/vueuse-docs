import{o as n,c as s,b as e,e as a}from"./app.5f9bb12a.js";const o='{"title":"useIpcRendererInvoke","description":"","frontmatter":"category \'@Electron\'","headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"electron/useIpcRendererInvoke/index.md","lastUpdated":1626320652930}',t={},p=a('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>available in add-on <a href="/electron/README.html"><code>@vueuse/electron</code></a></p></div><h1 id="useipcrendererinvoke"><a class="header-anchor" href="#useipcrendererinvoke" aria-hidden="true">#</a> useIpcRendererInvoke</h1><p>Reactive <a href="https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererinvokechannel-args" target="_blank" rel="noopener noreferrer">ipcRenderer.invoke API</a> result. Make asynchronous operations look like synchronous.</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useIpcRendererInvoke <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/electron&#39;</span>\n\n<span class="token comment">// enable nodeIntegration if you don&#39;t provide ipcRenderer explicitly </span>\n<span class="token comment">// @see: https://www.electronjs.org/docs/api/webview-tag#nodeintegration</span>\n<span class="token comment">// Ref result will return</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useIpcRendererInvoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;custom-channel&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;some data&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> result<span class="token punctuation">.</span>value<span class="token operator">?.</span>msg<span class="token punctuation">)</span>\n\n</code></pre></div>',5),r=a('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token comment">/**\n * Returns Promise&lt;any&gt; - Resolves with the response from the main process.\n *\n * Send a message to the main process via channel and expect a result ~~asynchronously~~. As composition-api, it makes asynchronous operations look like synchronous.\n *\n * You need to provide `ipcRenderer` to this function.\n *\n * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererinvokechannel-args\n * @export\n * @template T\n * @param {IpcRenderer} ipcRenderer\n * @param {string} channel\n * @param {...any[]} args\n * @returns {(Ref&lt;T | null&gt;)}\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useIpcRendererInvoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  ipcRenderer<span class="token operator">:</span> IpcRenderer<span class="token punctuation">,</span>\n  channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>\n<span class="token comment">/**\n * Returns Promise&lt;any&gt; - Resolves with the response from the main process.\n *\n * Send a message to the main process via channel and expect a result ~~asynchronously~~. As composition-api, it makes asynchronous operations look like synchronous.\n *\n * `ipcRenderer` will be automatically gotten.\n *\n * @see https://www.electronjs.org/docs/api/ipc-renderer#ipcrendererinvokechannel-args\n * @export\n * @template T\n * @param {string} channel\n * @param {...any[]} args\n * @returns {(Ref&lt;T | null&gt;)}\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useIpcRendererInvoke</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  channel<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/electron/useIpcRendererInvoke/index.ts" target="_blank" rel="noopener noreferrer">Source</a> â€¢ <a href="https://github.com/vueuse/vueuse/blob/main/packages/electron/useIpcRendererInvoke/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4);t.render=function(a,o,t,c,l,i){return n(),s("div",null,[p,e("FOOTER_STARTS"),r,e("FOOTER_ENDS")])};export default t;export{o as __pageData};
