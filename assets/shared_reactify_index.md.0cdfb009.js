import{o as n,c as s,b as a,e as t}from"./app.5f9bb12a.js";const p='{"title":"reactify","description":"","frontmatter":{},"headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"shared/reactify/index.md","lastUpdated":1626320652938}',o={},e=t('<h1 id="reactify"><a class="header-anchor" href="#reactify" aria-hidden="true">#</a> reactify</h1><p>Converts plain functions into reactive functions. The converted function accepts refs as its arguments and returns a ComputedRef, with proper typing.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Interested to see some application or looking for some pre-reactified functions?</p><p>Check out <a href="https://github.com/antfu/vue-chemistry" target="_blank" rel="noopener noreferrer">⚗️ Vue Chemistry</a>!</p></div><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Basic example</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactify <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token comment">// a plain function</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n\n<span class="token comment">// now it accept refs and returns a computed ref</span>\n<span class="token comment">// (a: number | Ref&lt;number&gt;, b: number | Ref&lt;number&gt;) =&gt; ComputedRef&lt;number&gt;</span>\n<span class="token keyword">const</span> reactiveAdd <span class="token operator">=</span> <span class="token function">reactify</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">reactiveAdd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 3</span>\n\na<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">5</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 7</span>\n</code></pre></div><p>An example of implementing a reactive <a href="https://en.wikipedia.org/wiki/Pythagorean_theorem" target="_blank" rel="noopener noreferrer">Pythagorean theorem</a>.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactify <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> pow <span class="token operator">=</span> <span class="token function">reactify</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>pow<span class="token punctuation">)</span>\n<span class="token keyword">const</span> sqrt <span class="token operator">=</span> <span class="token function">reactify</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>sqrt<span class="token punctuation">)</span>\n<span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token function">reactify</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pow</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 5</span>\n\n<span class="token comment">// 5:12:13</span>\na<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">5</span>\nb<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">12</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 13</span>\n</code></pre></div><p>You can also do it this way:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactify <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">pythagorean</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">reactify</span><span class="token punctuation">(</span>pythagorean<span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 5</span>\n</code></pre></div><p>Another example of making reactive <code>stringify</code></p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactify <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> stringify <span class="token operator">=</span> <span class="token function">reactify</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span>stringify<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> dumped <span class="token operator">=</span> <span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dumped<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// &#39;42&#39;</span>\n\nobj<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dumped<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// &#39;{&quot;foo&quot;:&quot;bar&quot;}&#39;</span>\n</code></pre></div>',12),c=t('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">Reactify<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span>\n  <span class="token operator">?</span> <span class="token punctuation">(</span>\n      <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">A</span><span class="token punctuation">]</span><span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ComputedRef<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span>\n  <span class="token operator">:</span> <span class="token builtin">never</span>\n<span class="token comment">/**\n * Converts plain function into a reactive function.\n * The converted function accepts refs as it&#39;s arguments\n * and returns a ComputedRef, with proper typing.\n *\n * @param fn - Source function\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">reactify</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> Reactify<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/shared/reactify/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/shared/reactify/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4);o.render=function(t,p,o,l,u,r){return n(),s("div",null,[e,a("FOOTER_STARTS"),c,a("FOOTER_ENDS")])};export default o;export{p as __pageData};
