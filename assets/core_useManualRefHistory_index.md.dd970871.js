import{_ as n}from"./DemoContainer.vue_vue&type=script&setup=true&lang.538fc852.js";import{f as s,a8 as a,a9 as t,o,c as e,a as p,t as c,u as r,w as l,F as u,E as i,aa as k,d,b as m,e as f}from"./app.5f9bb12a.js";import{_ as h}from"./Note.4d65cb61.js";const y=p("span",{class:"ml-2"},"/",-1),g=p("br",null,null,-1),b=p("br",null,null,-1),v=d("History (limited to 10 records for demo)"),R={class:"code-block mt-4"},w={class:"opacity-50 mr-2 font-mono"},H={class:"font-mono"};var S=s({setup(n){const{inc:s,dec:d,count:m}=a(),{canUndo:f,canRedo:S,history:_,commit:M,undo:T,redo:C}=t(m,{capacity:10});return(n,a)=>{const t=h;return o(),e(u,null,[p("div",null,"Count: "+c(r(m)),1),p("button",{onClick:a[1]||(a[1]=n=>r(s)())}," Increment "),p("button",{onClick:a[2]||(a[2]=n=>r(d)())}," Decrement "),y,p("button",{onClick:a[3]||(a[3]=n=>r(M)())}," Commit "),p("button",{disabled:!r(f),onClick:a[4]||(a[4]=n=>r(T)())}," Undo ",8,["disabled"]),p("button",{disabled:!r(S),onClick:a[5]||(a[5]=n=>r(C)())}," Redo ",8,["disabled"]),g,b,p(t,null,{default:l((()=>[v])),_:1}),p("div",R,[(o(!0),e(u,null,i(r(_),(n=>{return o(),e("div",{key:n.timestamp},[p("span",w,c((s=n.timestamp,k(s).format())),1),p("span",H,"{ value: "+c(n.snapshot)+" }",1)]);var s})),128))])],64)}}});const _=p("h1",{id:""},[p("a",{class:"header-anchor",href:"#","aria-hidden":"true"},"#")],-1),M=f('<p>useManualRefHistory</p><p>Manually track the change history of a ref when the using calls <code>commit()</code>, also provides undo and redo functionality</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-ts"><div class="highlight-lines"><br><br><br><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> \n<span class="token keyword">import</span> <span class="token punctuation">{</span> useManualRefHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> undo<span class="token punctuation">,</span> redo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useManualRefHistory</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>\n\ncounter<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>\n<span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n<span class="token comment">/* [\n  { snapshot: 1, timestamp: 1601912898062 }, \n  { snapshot: 0, timestamp: 1601912898061 }\n] */</span>\n</code></pre></div><p>You can use <code>undo</code> to reset the ref value to the last history point.</p><div class="language-ts"><pre><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n</code></pre></div><h4 id="history-of-mutable-objects"><a class="header-anchor" href="#history-of-mutable-objects" aria-hidden="true">#</a> History of mutable objects</h4><p>If you are going to mutate the source, you need to pass a custom clone function or use <code>clone</code> <code>true</code> as a param, that is a shortcut for a minimal clone function <code>x =&gt; JSON.parse(JSON.stringify(x))</code> that will be used in both <code>dump</code> and <code>parse</code>.</p><div class="language-ts"><div class="highlight-lines"><br><br><br><br><div class="highlighted"> </div><br><br><br><br></div><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> \n<span class="token keyword">import</span> <span class="token punctuation">{</span> useManualRefHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> history<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> undo<span class="token punctuation">,</span> redo <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useManualRefHistory</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token punctuation">{</span> clone<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\ncounter<span class="token punctuation">.</span>value<span class="token punctuation">.</span>foo <span class="token operator">+=</span> <span class="token number">1</span>\n<span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="custom-clone-function"><a class="header-anchor" href="#custom-clone-function" aria-hidden="true">#</a> Custom Clone Function</h4><p>To use a full featured or custom clone function, you can set up via the <code>dump</code> options.</p><p>For example, using <a href="https://lodash.com/docs/4.17.15#cloneDeep" target="_blank" rel="noopener noreferrer">lodash&#39;s <code>cloneDeep</code></a>:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> cloneDeep <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash-es&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useManualRefHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> refHistory <span class="token operator">=</span> <span class="token function">useManualRefHistory</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span> clone<span class="token operator">:</span> cloneDeep <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Or a more lightweight <a href="https://github.com/lukeed/klona" target="_blank" rel="noopener noreferrer"><code>klona</code></a>:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> klona <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;klona&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useManualRefHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> refHistory <span class="token operator">=</span> <span class="token function">useManualRefHistory</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span> clone<span class="token operator">:</span> klona <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h4 id="custom-dump-and-parse-function"><a class="header-anchor" href="#custom-dump-and-parse-function" aria-hidden="true">#</a> Custom Dump and Parse Function</h4><p>Instead of using the <code>clone</code> param, you can pass custom functions to control the serialization and parsing. In case you do not need history values to be objects, this can save an extra clone when undoing. It is also useful in case you want to have the snapshots already stringified to be saved to local storage for example.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useManualRefHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> refHistory <span class="token operator">=</span> <span class="token function">useManualRefHistory</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span> \n  dump<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span>stringify<span class="token punctuation">,</span>\n  parse<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span>parse\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="history-capacity"><a class="header-anchor" href="#history-capacity" aria-hidden="true">#</a> History Capacity</h3><p>We will keep all the history by default (unlimited) until you explicitly clear them up, you can set the maximal amount of history to be kept by <code>capacity</code> options.</p><div class="language-ts"><pre><code><span class="token keyword">const</span> refHistory <span class="token operator">=</span> <span class="token function">useManualRefHistory</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  capacity<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token comment">// limit to 15 history records</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nrefHistory<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// explicitly clear all the history</span>\n</code></pre></div><h2 id="related-functions"><a class="header-anchor" href="#related-functions" aria-hidden="true">#</a> Related Functions</h2><ul><li><code>useRefHistory</code></li></ul>',23),T=f('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UseRefHistoryRecord<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  snapshot<span class="token operator">:</span> <span class="token constant">T</span>\n  timestamp<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">CloneFn<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token constant">F</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">F</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UseManualRefHistoryOptions<span class="token operator">&lt;</span>Raw<span class="token punctuation">,</span> Serialized <span class="token operator">=</span> Raw<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Maximum number of history to be kept. Default to unlimited.\n   */</span>\n  capacity<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token comment">/**\n   * Clone when taking a snapshot, shortcut for dump: JSON.parse(JSON.stringify(value)).\n   * Default to false\n   *\n   * @default false\n   */</span>\n  clone<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> CloneFn<span class="token operator">&lt;</span>Raw<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Serialize data into the history\n   */</span>\n  dump<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> Raw<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Serialized\n  <span class="token comment">/**\n   * Deserialize data from the history\n   */</span>\n  parse<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> Serialized<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Raw\n  <span class="token comment">/**\n   * Deserialize data from the history\n   */</span>\n  setSource<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>source<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>Raw<span class="token operator">&gt;</span><span class="token punctuation">,</span> v<span class="token operator">:</span> Raw<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UseManualRefHistoryReturn<span class="token operator">&lt;</span>Raw<span class="token punctuation">,</span> Serialized<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Bypassed tracking ref from the argument\n   */</span>\n  source<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>Raw<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * An array of history records for undo, newest comes to first\n   */</span>\n  history<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UseRefHistoryRecord<span class="token operator">&lt;</span>Serialized<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Last history point, source can be different if paused\n   */</span>\n  last<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UseRefHistoryRecord<span class="token operator">&lt;</span>Serialized<span class="token operator">&gt;&gt;</span>\n  <span class="token comment">/**\n   * Same as &#39;history&#39;\n   */</span>\n  undoStack<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UseRefHistoryRecord<span class="token operator">&lt;</span>Serialized<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Records array for redo\n   */</span>\n  redoStack<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>UseRefHistoryRecord<span class="token operator">&lt;</span>Serialized<span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * A ref representing if undo is possible (non empty undoStack)\n   */</span>\n  canUndo<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * A ref representing if redo is possible (non empty redoStack)\n   */</span>\n  canRedo<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Undo changes\n   */</span>\n  <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Redo changes\n   */</span>\n  <span class="token function">redo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Clear all the history\n   */</span>\n  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Create new a new history record\n   */</span>\n  <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Reset ref&#39;s value with lastest history\n   */</span>\n  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/**\n * Track the change history of a ref, also provides undo and redo functionality.\n *\n * @see /useManualRefHistory\n * @param source\n * @param options\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useManualRefHistory</span><span class="token generic class-name"><span class="token operator">&lt;</span>Raw<span class="token punctuation">,</span> Serialized <span class="token operator">=</span> Raw<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  source<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>Raw<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> UseManualRefHistoryOptions<span class="token operator">&lt;</span>Raw<span class="token punctuation">,</span> Serialized<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> UseManualRefHistoryReturn<span class="token operator">&lt;</span>Raw<span class="token punctuation">,</span> Serialized<span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useManualRefHistory/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useManualRefHistory/demo.vue" target="_blank" rel="noopener noreferrer">Demo</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useManualRefHistory/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4),C='{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":3,"title":"History Capacity","slug":"history-capacity"},{"level":2,"title":"Related Functions","slug":"related-functions"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/useManualRefHistory/index.md","lastUpdated":1626320652926}',x={};const D=Object.assign(x,{setup:function(s){return(s,a)=>{const t=n;return o(),e("div",null,[_,p(t,null,{default:l((()=>[p(S)])),_:1}),M,m("FOOTER_STARTS"),T,m("FOOTER_ENDS")])}}});export default D;export{C as __pageData};
