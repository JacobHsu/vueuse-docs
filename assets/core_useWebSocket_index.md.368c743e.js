import{o as n,c as s,b as a,e}from"./app.5f9bb12a.js";const t='{"title":"useWebSocket","description":"","frontmatter":"category Misc","headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":3,"title":"Immediate","slug":"immediate"},{"level":3,"title":"Auto-reconnection","slug":"auto-reconnection"},{"level":3,"title":"Heartbeat","slug":"heartbeat"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/useWebSocket/index.md","lastUpdated":1626320652930}',o={},p=e('<h1 id="usewebsocket"><a class="header-anchor" href="#usewebsocket" aria-hidden="true">#</a> useWebSocket</h1><p>Reactive <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/WebSocket" target="_blank" rel="noopener noreferrer">WebSocket</a> client.</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useWebSocket <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> data<span class="token punctuation">,</span> send<span class="token punctuation">,</span> open<span class="token punctuation">,</span> close <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useWebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://websocketurl&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>See the <a href="#type-declarations">Type Declarations</a> for more options.</p><h3 id="immediate"><a class="header-anchor" href="#immediate" aria-hidden="true">#</a> Immediate</h3><p>Auto connect (enabled by default).</p><p>This will call <code>open()</code> automatically for you and you don&#39;t need to call it by yourself.</p><h3 id="auto-reconnection"><a class="header-anchor" href="#auto-reconnection" aria-hidden="true">#</a> Auto-reconnection</h3><p>Reconnect on errors automatically (disabled by default).</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> data<span class="token punctuation">,</span> close <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useWebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://websocketurl&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  autoReconnect<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Or with more controls over its behavior:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> data<span class="token punctuation">,</span> close <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useWebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://websocketurl&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  autoReconnect<span class="token operator">:</span> <span class="token punctuation">{</span>\n    retries<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    delay<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n    <span class="token function">onFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to connect WebSocket after 3 retires&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Explicitly calling <code>close()</code> won&#39;t trigger the auto reconnection.</p><h3 id="heartbeat"><a class="header-anchor" href="#heartbeat" aria-hidden="true">#</a> Heartbeat</h3><p>It&#39;s common practice to send a small message (heartbeat) for every given time passed to keep the connection active. In this function we provide a convenient helper to do it:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> data<span class="token punctuation">,</span> close <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useWebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://websocketurl&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  heartbeat<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Or with more controls:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> status<span class="token punctuation">,</span> data<span class="token punctuation">,</span> close <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useWebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://websocketurl&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  heartbeat<span class="token operator">:</span> <span class="token punctuation">{</span>\n    message<span class="token operator">:</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span>\n    interval<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',19),c=e('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">WebSocketStatus</span> <span class="token operator">=</span> <span class="token string">&quot;OPEN&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;CONNECTING&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;CLOSED&quot;</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WebSocketOptions</span> <span class="token punctuation">{</span>\n  onConnected<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>ws<span class="token operator">:</span> WebSocket<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  onDisconnected<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>ws<span class="token operator">:</span> WebSocket<span class="token punctuation">,</span> event<span class="token operator">:</span> CloseEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  onError<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>ws<span class="token operator">:</span> WebSocket<span class="token punctuation">,</span> event<span class="token operator">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  onMessage<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>ws<span class="token operator">:</span> WebSocket<span class="token punctuation">,</span> event<span class="token operator">:</span> MessageEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n  <span class="token comment">/**\n   * Send heartbeat for every x milliseconds passed\n   *\n   * @default false\n   */</span>\n  heartbeat<span class="token operator">?</span><span class="token operator">:</span>\n    <span class="token operator">|</span> <span class="token builtin">boolean</span>\n    <span class="token operator">|</span> <span class="token punctuation">{</span>\n        <span class="token comment">/**\n         * Message for the heartbeat\n         *\n         * @default &#39;ping&#39;\n         */</span>\n        message<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n        <span class="token comment">/**\n         * Interval, in milliseconds\n         *\n         * @default 1000\n         */</span>\n        interval<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n      <span class="token punctuation">}</span>\n  <span class="token comment">/**\n   * Enabled auto reconnect\n   *\n   * @default false\n   */</span>\n  autoReconnect<span class="token operator">?</span><span class="token operator">:</span>\n    <span class="token operator">|</span> <span class="token builtin">boolean</span>\n    <span class="token operator">|</span> <span class="token punctuation">{</span>\n        <span class="token comment">/**\n         * Maximum retry times.\n         *\n         * @default -1\n         */</span>\n        retries<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n        <span class="token comment">/**\n         * Delay for reconnect, in milliseconds\n         *\n         * @default 1000\n         */</span>\n        delay<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n        <span class="token comment">/**\n         * On maximum retry times reached.\n         */</span>\n        onFailed<span class="token operator">?</span><span class="token operator">:</span> Fn\n      <span class="token punctuation">}</span>\n  <span class="token comment">/**\n   * Automatically open a connection\n   *\n   * @default true\n   */</span>\n  immediate<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WebSocketResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/**\n   * Reference to the latest data received via the websocket,\n   * can be watched to respond to incoming messages\n   */</span>\n  data<span class="token operator">:</span> Ref<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * The current websocket status, can be only one of:\n   * &#39;OPEN&#39;, &#39;CONNECTING&#39;, &#39;CLOSED&#39;\n   */</span>\n  status<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>WebSocketStatus<span class="token operator">&gt;</span>\n  <span class="token comment">/**\n   * Closes the websocket connection gracefully.\n   */</span>\n  close<span class="token operator">:</span> WebSocket<span class="token punctuation">[</span><span class="token string">&quot;close&quot;</span><span class="token punctuation">]</span>\n  <span class="token comment">/**\n   * Reopen the websocket connection.\n   * If there the current one is active, will close it before opening a new one.\n   */</span>\n  open<span class="token operator">:</span> Fn\n  <span class="token comment">/**\n   * Sends data through the websocket connection.\n   *\n   * @param data\n   * @param useBuffer when the socket is not yet open, store the data into the buffer and sent them one connected. Default to true.\n   */</span>\n  <span class="token function-variable function">send</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> ArrayBuffer <span class="token operator">|</span> Blob<span class="token punctuation">,</span> useBuffer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span>\n  <span class="token comment">/**\n   * Reference to the WebSocket instance.\n   */</span>\n  ws<span class="token operator">:</span> Ref<span class="token operator">&lt;</span>WebSocket <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/**\n * Reactive WebSocket client.\n *\n * @see /useWebSocket\n * @param url\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useWebSocket</span><span class="token generic class-name"><span class="token operator">&lt;</span>Data <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> WebSocketOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> WebSocketResult<span class="token operator">&lt;</span>Data<span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useWebSocket/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useWebSocket/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4);o.render=function(e,t,o,l,r,u){return n(),s("div",null,[p,a("FOOTER_STARTS"),c,a("FOOTER_ENDS")])};export default o;export{t as __pageData};
