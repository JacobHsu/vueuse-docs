import{o as n,c as s,e as a}from"./app.5f9bb12a.js";const e='{"title":"Configurations","description":"","frontmatter":{},"headers":[{"level":3,"title":"Event Filters","slug":"event-filters"},{"level":3,"title":"Reactive Timing","slug":"reactive-timing"},{"level":3,"title":"Configurable Global Dependencies","slug":"configurable-global-dependencies"}],"relativePath":"guide/config.md","lastUpdated":1626320652930}',t={},o=a('<h1 id="configurations"><a class="header-anchor" href="#configurations" aria-hidden="true">#</a> Configurations</h1><p>These show the general configurations for most of the functions in VueUse.</p><h3 id="event-filters"><a class="header-anchor" href="#event-filters" aria-hidden="true">#</a> Event Filters</h3><p>From v4.0, we provide the Event Filters system to give the flexibility to control when will events get triggered. For example, you can use <code>throttleFilter</code> and <code>debounceFilter</code> to control the event trigger rate:</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> throttleFilter<span class="token punctuation">,</span> debounceFilter<span class="token punctuation">,</span> useLocalStorage<span class="token punctuation">,</span> useMouse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token comment">// changes will write to localStorage with a throttled 1s</span>\n<span class="token keyword">const</span> storage <span class="token operator">=</span> <span class="token function">useLocalStorage</span><span class="token punctuation">(</span><span class="token string">&#39;my-key&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> eventFilter<span class="token operator">:</span> <span class="token function">throttleFilter</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// mouse position will be updated after mouse idle for 100ms</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> eventFilter<span class="token operator">:</span> <span class="token function">debounceFilter</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>Moreover, you can utilize <code>pauseableFilter</code> to temporarily pause some events.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> pauseableFilter<span class="token punctuation">,</span> useDeviceMotion <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> motionControl <span class="token operator">=</span> <span class="token function">pauseableFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> motion <span class="token operator">=</span> <span class="token function">useDeviceMotion</span><span class="token punctuation">(</span><span class="token punctuation">{</span> eventFilter<span class="token operator">:</span> motionControl<span class="token punctuation">.</span>eventFilter <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmotionControl<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n\n<span class="token comment">// motion updates paused</span>\n\nmotionControl<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// motion updates resumed</span>\n</code></pre></div><h3 id="reactive-timing"><a class="header-anchor" href="#reactive-timing" aria-hidden="true">#</a> Reactive Timing</h3><p>VueUse&#39;s functions follow Vue&#39;s reactivity system defaults for <a href="https://v3.vuejs.org/guide/reactivity-computed-watchers.html#effect-flush-timing" target="_blank" rel="noopener noreferrer">flush timing</a> where possible.</p><p>For <code>watch</code>-like composables (e.g. <a href="/shared/pausableWatch/"><code>pausableWatch</code></a> <code>when</code>, <a href="/core/useStorage/"><code>useStorage</code></a> <a href="/core/useRefHistory/"><code>useRefHistory</code></a> the default is <code>{ flush: &#39;pre&#39; }</code>. Which means they will buffer invalidated effects and flush them asynchronously. This avoids unnecessary duplicate invocation when there are multiple state mutations happening in the same &quot;tick&quot;.</p><p>In the same way as with <code>watch</code>, VueUse allows you to configure the timing by passing the <code>flush</code> option:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> pause<span class="token punctuation">,</span> resume <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">pausableWatch</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Safely access updated DOM</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> flush<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre></div><p><strong>flush option (default: <code>&#39;pre&#39;</code>)</strong></p><ul><li><code>&#39;pre&#39;</code>: buffers invalidated effects in the same &#39;tick&#39; and flushes them before rendering</li><li><code>&#39;post&#39;</code>: async like &#39;pre&#39; but fires after component updates so you can access the updated DOM</li><li><code>&#39;sync&#39;</code>: forces the effect to always trigger synchronously</li></ul><p><strong>Note:</strong> For <code>computed</code>-like composables (e.g. <a href="/shared/syncRef/"><code>syncRef</code></a> <a href="/shared/controlledComputed/"><code>controlledComputed</code></a>, when flush timing is configurable, the default is changed to <code>{ flush: &#39;sync&#39; }</code> to align them with the way computed refs works in Vue.</p><h3 id="configurable-global-dependencies"><a class="header-anchor" href="#configurable-global-dependencies" aria-hidden="true">#</a> Configurable Global Dependencies</h3><p>From v4.0, functions that access the browser APIs will provide an option fields for you to specify the global dependencies (e.g. <code>window</code>, <code>document</code> and <code>navigator</code>). It will use the global instance by default, so for most of the time, you don&#39;t need to worry about it. This configure is useful when working with iframes and testing environments.</p><div class="language-ts"><pre><code><span class="token comment">// accessing parent context</span>\n<span class="token keyword">const</span> parentMousePos <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> window<span class="token operator">:</span> window<span class="token punctuation">.</span>parent <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelect</span><span class="token punctuation">(</span><span class="token string">&#39;#my-iframe&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// accessing child context</span>\n<span class="token keyword">const</span> childMousePos <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> window<span class="token operator">:</span> iframe<span class="token punctuation">.</span>contextWindow <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-ts"><pre><code><span class="token comment">// testing</span>\n<span class="token keyword">const</span> mockWindow <span class="token operator">=</span> <span class="token comment">/* ... */</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> window<span class="token operator">:</span> mockWindow <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',19);t.render=function(a,e,t,p,c,i){return n(),s("div",null,[o])};export default t;export{e as __pageData};
