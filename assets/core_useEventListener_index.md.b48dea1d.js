import{o as n,c as s,b as a,e as t}from"./app.5f9bb12a.js";const e='{"title":"useEventListener","description":"","frontmatter":"category Browser","headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/useEventListener/index.md","lastUpdated":1626320652926}',p={},o=t('<h1 id="useeventlistener"><a class="header-anchor" href="#useeventlistener" aria-hidden="true">#</a> useEventListener</h1><p>Use EventListener with ease. Register using <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noopener noreferrer">addEventListener</a> on mounted, and <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener" target="_blank" rel="noopener noreferrer">removeEventListener</a> automatically on unmounted.</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEventListener <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token function">useEventListener</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">&#39;visibilitychange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><p>You can also pass a ref as the event target, <a href="/core/useEventListener/"><code>useEventListener</code></a>will unregister the previous event and register the new one when you change the target.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEventListener <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLDivElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">useEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cond<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>element<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>element<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Div2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',7),c=t('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">interface</span> <span class="token class-name">InferEventTarget<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  <span class="token function">addEventListener</span><span class="token punctuation">(</span>event<span class="token operator">:</span> Events<span class="token punctuation">,</span> fn<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>\n  <span class="token function">removeEventListener</span><span class="token punctuation">(</span>event<span class="token operator">:</span> Events<span class="token punctuation">,</span> fn<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">WindowEventName</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> WindowEventMap\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">DocumentEventName</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> DocumentEventMap\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">GeneralEventListener<span class="token operator">&lt;</span><span class="token constant">E</span> <span class="token operator">=</span> Event<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>evt<span class="token operator">:</span> <span class="token constant">E</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/**\n * Register using addEventListener on mounted, and removeEventListener automatically on unmounted.\n *\n * Overload 1: Omitted Window target\n *\n * @see /useEventListener\n * @param event\n * @param listener\n * @param options\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useEventListener</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">E</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> WindowEventMap<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  event<span class="token operator">:</span> <span class="token constant">E</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">listener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> Window<span class="token punctuation">,</span> ev<span class="token operator">:</span> WindowEventMap<span class="token punctuation">[</span><span class="token constant">E</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> AddEventListenerOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> Fn\n<span class="token comment">/**\n * Register using addEventListener on mounted, and removeEventListener automatically on unmounted.\n *\n * Overload 2: Explicitly Window target\n *\n * @see /useEventListener\n * @param target\n * @param event\n * @param listener\n * @param options\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useEventListener</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">E</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> WindowEventMap<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  target<span class="token operator">:</span> Window<span class="token punctuation">,</span>\n  event<span class="token operator">:</span> <span class="token constant">E</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">listener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> Window<span class="token punctuation">,</span> ev<span class="token operator">:</span> WindowEventMap<span class="token punctuation">[</span><span class="token constant">E</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> AddEventListenerOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> Fn\n<span class="token comment">/**\n * Register using addEventListener on mounted, and removeEventListener automatically on unmounted.\n *\n * Overload 3: Explicitly Document target\n *\n * @see /useEventListener\n * @param target\n * @param event\n * @param listener\n * @param options\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useEventListener</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">E</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> DocumentEventMap<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  target<span class="token operator">:</span> Document<span class="token punctuation">,</span>\n  event<span class="token operator">:</span> <span class="token constant">E</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">listener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> Document<span class="token punctuation">,</span> ev<span class="token operator">:</span> DocumentEventMap<span class="token punctuation">[</span><span class="token constant">E</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> AddEventListenerOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> Fn\n<span class="token comment">/**\n * Register using addEventListener on mounted, and removeEventListener automatically on unmounted.\n *\n * Overload 4: Custom event target with event type infer\n *\n * @see /useEventListener\n * @param target\n * @param event\n * @param listener\n * @param options\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useEventListener</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n  Names <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  EventType <span class="token operator">=</span> Event\n<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  target<span class="token operator">:</span> InferEventTarget<span class="token operator">&lt;</span>Names<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  event<span class="token operator">:</span> Names<span class="token punctuation">,</span>\n  listener<span class="token operator">:</span> GeneralEventListener<span class="token operator">&lt;</span>EventType<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> AddEventListenerOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> Fn\n<span class="token comment">/**\n * Register using addEventListener on mounted, and removeEventListener automatically on unmounted.\n *\n * Overload 5: Custom event target fallback\n *\n * @see /useEventListener\n * @param target\n * @param event\n * @param listener\n * @param options\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useEventListener</span><span class="token generic class-name"><span class="token operator">&lt;</span>EventType <span class="token operator">=</span> Event<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  target<span class="token operator">:</span> MaybeRef<span class="token operator">&lt;</span>EventTarget <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  listener<span class="token operator">:</span> GeneralEventListener<span class="token operator">&lt;</span>EventType<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> AddEventListenerOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> Fn\n<span class="token keyword">export</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useEventListener/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/useEventListener/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4);p.render=function(t,e,p,r,l,k){return n(),s("div",null,[o,a("FOOTER_STARTS"),c,a("FOOTER_ENDS")])};export default p;export{e as __pageData};
