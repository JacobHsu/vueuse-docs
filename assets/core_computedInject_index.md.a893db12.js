import{_ as n}from"./DemoContainer.vue_vue&type=script&setup=true&lang.538fc852.js";import{f as s,j as a,r as t,o as p,c as o,t as e,k as c,p as r,a as l,w as k,b as u,e as i}from"./app.5f9bb12a.js";const d=Symbol("array");var y=s({name:"DemoProvider",setup:()=>({computedArr:a(d,(n=>{if(!n)return t([]);const s=[...n.value];return s.unshift({key:0,value:"all"}),s}))})});const g=c("data-v-823e2efa")(((n,s,a,t,c,r)=>(p(),o("div",null,"ComputedArr: "+e(n.computedArr),1))));y.render=g,y.__scopeId="data-v-823e2efa";var m=s({setup(n){const s=t([{key:1,value:"1"},{key:2,value:"2"},{key:3,value:"3"}]);return r(d,s),(n,a)=>(p(),o("div",null,[l("p",null,"Array: "+e(s.value),1),l(y)]))}});const f=i('<h1 id="computedinject"><a class="header-anchor" href="#computedinject" aria-hidden="true">#</a> computedInject</h1><p>Combine computed and inject</p><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>In Provider Component</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> InjectionKey<span class="token punctuation">,</span> provide<span class="token punctuation">,</span> Ref<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-demi&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> ArrayKey<span class="token operator">:</span> InjectionKey<span class="token operator">&lt;</span>Ref<span class="token operator">&lt;</span><span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;3&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token function">provide</span><span class="token punctuation">(</span>ArrayKey<span class="token punctuation">,</span> array<span class="token punctuation">)</span>\n</code></pre></div><p>In Receiver Component</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> computedInject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vueuse/core&#39;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ArrayKey <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./provider&quot;</span>\n\n<span class="token keyword">const</span> computedArray <span class="token operator">=</span> <span class="token function">computedInject</span><span class="token punctuation">(</span>ArrayKey<span class="token punctuation">,</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>source<span class="token punctuation">.</span>value<span class="token punctuation">]</span>\n  arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&#39;all&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',7),v=i('<h2 id="type-declarations"><a class="header-anchor" href="#type-declarations" aria-hidden="true">#</a> Type Declarations</h2><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">ComputedInjectGetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  source<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  ctx<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">K</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">ComputedInjectGetterWithDefault<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n  source<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  ctx<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span>\n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">K</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">ComputedInjectSetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WritableComputedInjectOptions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  get<span class="token operator">:</span> ComputedInjectGetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span>\n  set<span class="token operator">:</span> ComputedInjectSetter<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">WritableComputedInjectOptionsWithDefault<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  get<span class="token operator">:</span> ComputedInjectGetterWithDefault<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span>\n  set<span class="token operator">:</span> ComputedInjectSetter<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computedInject</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  key<span class="token operator">:</span> InjectionKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  getter<span class="token operator">:</span> ComputedInjectGetter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computedInject</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  key<span class="token operator">:</span> InjectionKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> WritableComputedInjectOptions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computedInject</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  key<span class="token operator">:</span> InjectionKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  getter<span class="token operator">:</span> ComputedInjectGetterWithDefault<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  defaultSource<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  treatDefaultAsFactory<span class="token operator">?</span><span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computedInject</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  key<span class="token operator">:</span> InjectionKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> WritableComputedInjectOptionsWithDefault<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  defaultSource<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  treatDefaultAsFactory<span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> ComputedRef<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token operator">&gt;</span>\n</code></pre></div><h2 id="source"><a class="header-anchor" href="#source" aria-hidden="true">#</a> Source</h2><p><a href="https://github.com/vueuse/vueuse/blob/main/packages/core/computedInject/index.ts" target="_blank" rel="noopener noreferrer">Source</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/computedInject/demo.vue" target="_blank" rel="noopener noreferrer">Demo</a> • <a href="https://github.com/vueuse/vueuse/blob/main/packages/core/computedInject/index.md" target="_blank" rel="noopener noreferrer">Docs</a></p>',4),T='{"title":"computedInject","description":"","frontmatter":"category Component","headers":[{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Type Declarations","slug":"type-declarations"},{"level":2,"title":"Source","slug":"source"}],"relativePath":"core/computedInject/index.md","lastUpdated":1626320652922}',b={};const h=Object.assign(b,{setup:function(s){return(s,a)=>{const t=n;return p(),o("div",null,[l(t,null,{default:k((()=>[l(m)])),_:1}),f,u("FOOTER_STARTS"),v,u("FOOTER_ENDS")])}}});export default h;export{T as __pageData};
